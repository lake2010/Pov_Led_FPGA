
Pov_Led_FPGA.elf:     file format elf32-littlenios2
Pov_Led_FPGA.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002044 memsz 0x000020e0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001d2c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  00009d4c  00009d4c  00002d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002dc  00009d88  00009d88  00002d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000a064  0000a064  00003064  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000468  00000000  00000000  00003088  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007329  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002374  00000000  00000000  0000a819  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a59  00000000  00000000  0000cb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006dc  00000000  00000000  0000f5e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001381  00000000  00000000  0000fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b91  00000000  00000000  00011045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000020  00000000  00000000  00012bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d0  00000000  00000000  00012bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00014313  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000a  00000000  00000000  00014316  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00014320  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00014321  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00014322  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00014326  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0001432a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0001432e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00014337  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00014340  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00014349  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000000f  00000000  00000000  00014354  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00042a8f  00000000  00000000  00014363  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00009d4c l    d  .rodata	00000000 .rodata
00009d88 l    d  .rwdata	00000000 .rwdata
0000a064 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pov_Led_FPGA_bsp//obj/HAL/src/crt0.o
00008064 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009d88 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000899c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008b44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008c80 l     F .text	00000038 alt_dev_reg
00009e68 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 my9262.c
00000000 l    df *ABS*	00000000 alt_close.c
00008fc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000090e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000910c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000092b4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000093ec l     F .text	00000050 alt_get_errno
0000943c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00008acc g     F .text	00000078 alt_main
000080f4 g     F .text	0000004c printf
00000000 g       *ABS*	00000000 __alt_mem_epcs_flash
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	00000000 __reset
0000a064 g     O .bss	00000004 errno
0000a06c g     O .bss	00000004 alt_argv
0001203c g       *ABS*	00000000 _gp
00009ebc g     O .rwdata	00000180 alt_fd_list
000096dc g     F .text	00000090 alt_find_dev
00009374 g     F .text	00000078 alt_io_redirect
00009d4c g       *ABS*	00000000 __DTOR_END__
00008dec g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000080b8 g     F .text	0000003c _printf_r
00008abc g     F .text	00000008 __udivsi3
00008f78 g     F .text	00000050 my9262WriteGrayscale
0000a05c g     O .rwdata	00000004 alt_max_fd
0000a03c g     O .rwdata	00000004 _global_impure_ptr
0000a100 g       *ABS*	00000000 __bss_end
00009e94 g     O .rwdata	00000028 alt_dev_null
0000a054 g     O .rwdata	00000008 alt_dev_list
00008b94 g     F .text	000000ec write
00008ac4 g     F .text	00000008 __umodsi3
0000a100 g       *ABS*	00000000 end
0000a048 g     O .rwdata	00000004 my9262_addr
00009d4c g       *ABS*	00000000 __CTOR_LIST__
0000a800 g       *ABS*	00000000 __alt_stack_pointer
00008ee0 g     F .text	00000098 altera_avalon_jtag_uart_write
00008140 g     F .text	000006c4 ___vfprintf_internal_r
00009b38 g     F .text	000001d8 __call_exitprocs
00008020 g     F .text	00000048 _start
00008cec g     F .text	00000040 alt_sys_init
000099b0 g     F .text	00000188 __register_exitproc
00008d2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009880 g     F .text	000000b4 alt_get_fd
00009968 g     F .text	00000048 memcmp
0000a100 g       *ABS*	00000000 __alt_stack_base
0000976c g     F .text	00000114 alt_find_file
0000915c g     F .text	000000a0 alt_dev_llist_insert
00008828 g     F .text	000000e0 __sfvwrite_small_dev
0000a064 g       *ABS*	00000000 __bss_start
00008068 g     F .text	00000050 main
0000a070 g     O .bss	00000004 alt_envp
00008d8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a044 g     O .rwdata	00000004 led_controller_addr
0000a074 g     O .bss	0000008c _atexit0
0000a060 g     O .rwdata	00000004 alt_errno
00008a10 g     F .text	00000050 __divsi3
00009d4c g       *ABS*	00000000 __CTOR_END__
00009d4c g       *ABS*	00000000 __DTOR_LIST__
00008cb8 g     F .text	00000034 alt_irq_init
0000965c g     F .text	00000060 alt_release_fd
00009934 g     F .text	00000014 atexit
00008930 g     F .text	0000006c _write_r
0000a040 g     O .rwdata	00000004 _impure_ptr
0000a068 g     O .bss	00000004 alt_argc
00009258 g     F .text	0000005c _do_dtors
0000a04c g     O .rwdata	00000008 alt_fs_list
0000a064 g       *ABS*	00000000 _edata
0000a100 g       *ABS*	00000000 _end
000096bc g     F .text	00000020 altera_nios2_qsys_irq_init
00009948 g     F .text	00000020 exit
00008a60 g     F .text	0000005c __modsi3
0000a800 g       *ABS*	00000000 __alt_data_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_ram
00009d10 g     F .text	0000003c _exit
00008908 g     F .text	00000028 strlen
00009508 g     F .text	00000154 open
00008804 g     F .text	00000024 __vfprintf_internal
000091fc g     F .text	0000005c _do_ctors
00009018 g     F .text	000000c8 close
00000000  w      *UND*	00000000 free



Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	deea0014 	ori	sp,sp,43008
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d6880f14 	ori	gp,gp,8252
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a81914 	ori	r2,r2,41060

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e84014 	ori	r3,r3,41216

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8060:	0008acc0 	call	8acc <alt_main>

00008064 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8064:	003fff06 	br	8064 <alt_after_alt_main>

00008068 <main>:
#include "priv/alt_legacy_irq.h"	//
#include <unistd.h>
#include "altera_avalon_pio_regs.h"

int main()
{
    8068:	defffd04 	addi	sp,sp,-12
    806c:	dfc00215 	stw	ra,8(sp)
    8070:	df000115 	stw	fp,4(sp)
    8074:	df000104 	addi	fp,sp,4
	int i;
	printf("Code Running...");
    8078:	01000074 	movhi	r4,1
    807c:	21275304 	addi	r4,r4,-25268
    8080:	00080f40 	call	80f4 <printf>
	while(1)
	{
		for(i=0;i<65535;i++)
    8084:	e03fff15 	stw	zero,-4(fp)
    8088:	00000706 	br	80a8 <main+0x40>
		{
			my9262WriteGrayscale(i);
    808c:	e0bfff17 	ldw	r2,-4(fp)
    8090:	10bfffcc 	andi	r2,r2,65535
    8094:	1009883a 	mov	r4,r2
    8098:	0008f780 	call	8f78 <my9262WriteGrayscale>
{
	int i;
	printf("Code Running...");
	while(1)
	{
		for(i=0;i<65535;i++)
    809c:	e0bfff17 	ldw	r2,-4(fp)
    80a0:	10800044 	addi	r2,r2,1
    80a4:	e0bfff15 	stw	r2,-4(fp)
    80a8:	e0bfff17 	ldw	r2,-4(fp)
    80ac:	00ffff94 	movui	r3,65534
    80b0:	18bff60e 	bge	r3,r2,808c <main+0x24>
//		led_allopen();
//		usleep(500000); //等待500ms
//		my9262WriteGrayscale(0);
//		led_allclose();
//		usleep(500000); //等待500ms
	}
    80b4:	003ff306 	br	8084 <main+0x1c>

000080b8 <_printf_r>:
    80b8:	defffd04 	addi	sp,sp,-12
    80bc:	dfc00015 	stw	ra,0(sp)
    80c0:	d9800115 	stw	r6,4(sp)
    80c4:	d9c00215 	stw	r7,8(sp)
    80c8:	20800217 	ldw	r2,8(r4)
    80cc:	00c00074 	movhi	r3,1
    80d0:	18e20a04 	addi	r3,r3,-30680
    80d4:	280d883a 	mov	r6,r5
    80d8:	10c00115 	stw	r3,4(r2)
    80dc:	100b883a 	mov	r5,r2
    80e0:	d9c00104 	addi	r7,sp,4
    80e4:	00081400 	call	8140 <___vfprintf_internal_r>
    80e8:	dfc00017 	ldw	ra,0(sp)
    80ec:	dec00304 	addi	sp,sp,12
    80f0:	f800283a 	ret

000080f4 <printf>:
    80f4:	defffc04 	addi	sp,sp,-16
    80f8:	dfc00015 	stw	ra,0(sp)
    80fc:	d9400115 	stw	r5,4(sp)
    8100:	d9800215 	stw	r6,8(sp)
    8104:	d9c00315 	stw	r7,12(sp)
    8108:	00800074 	movhi	r2,1
    810c:	10a81004 	addi	r2,r2,-24512
    8110:	10800017 	ldw	r2,0(r2)
    8114:	00c00074 	movhi	r3,1
    8118:	18e20a04 	addi	r3,r3,-30680
    811c:	200b883a 	mov	r5,r4
    8120:	10800217 	ldw	r2,8(r2)
    8124:	d9800104 	addi	r6,sp,4
    8128:	10c00115 	stw	r3,4(r2)
    812c:	1009883a 	mov	r4,r2
    8130:	00088040 	call	8804 <__vfprintf_internal>
    8134:	dfc00017 	ldw	ra,0(sp)
    8138:	dec00404 	addi	sp,sp,16
    813c:	f800283a 	ret

00008140 <___vfprintf_internal_r>:
    8140:	deffe204 	addi	sp,sp,-120
    8144:	d8c00804 	addi	r3,sp,32
    8148:	df001c15 	stw	fp,112(sp)
    814c:	ddc01b15 	stw	r23,108(sp)
    8150:	dd401915 	stw	r21,100(sp)
    8154:	dd001815 	stw	r20,96(sp)
    8158:	dcc01715 	stw	r19,92(sp)
    815c:	dc801615 	stw	r18,88(sp)
    8160:	dc001415 	stw	r16,80(sp)
    8164:	dfc01d15 	stw	ra,116(sp)
    8168:	dd801a15 	stw	r22,104(sp)
    816c:	dc401515 	stw	r17,84(sp)
    8170:	2039883a 	mov	fp,r4
    8174:	d9c00e15 	stw	r7,56(sp)
    8178:	3021883a 	mov	r16,r6
    817c:	0025883a 	mov	r18,zero
    8180:	d8001315 	stw	zero,76(sp)
    8184:	d8000d15 	stw	zero,52(sp)
    8188:	0029883a 	mov	r20,zero
    818c:	d8000b15 	stw	zero,44(sp)
    8190:	d8000c15 	stw	zero,48(sp)
    8194:	d8001115 	stw	zero,68(sp)
    8198:	d8001015 	stw	zero,64(sp)
    819c:	002b883a 	mov	r21,zero
    81a0:	04c00044 	movi	r19,1
    81a4:	d8c00a15 	stw	r3,40(sp)
    81a8:	282f883a 	mov	r23,r5
    81ac:	80c00003 	ldbu	r3,0(r16)
    81b0:	84000044 	addi	r16,r16,1
    81b4:	18803fcc 	andi	r2,r3,255
    81b8:	1080201c 	xori	r2,r2,128
    81bc:	10bfe004 	addi	r2,r2,-128
    81c0:	10001426 	beq	r2,zero,8214 <___vfprintf_internal_r+0xd4>
    81c4:	acc02f26 	beq	r21,r19,8284 <___vfprintf_internal_r+0x144>
    81c8:	9d401f16 	blt	r19,r21,8248 <___vfprintf_internal_r+0x108>
    81cc:	a83ff71e 	bne	r21,zero,81ac <___vfprintf_internal_r+0x6c>
    81d0:	01000944 	movi	r4,37
    81d4:	1100d526 	beq	r2,r4,852c <___vfprintf_internal_r+0x3ec>
    81d8:	b8800117 	ldw	r2,4(r23)
    81dc:	d8c00905 	stb	r3,36(sp)
    81e0:	e009883a 	mov	r4,fp
    81e4:	b80b883a 	mov	r5,r23
    81e8:	d9800904 	addi	r6,sp,36
    81ec:	01c00044 	movi	r7,1
    81f0:	103ee83a 	callr	r2
    81f4:	10009c1e 	bne	r2,zero,8468 <___vfprintf_internal_r+0x328>
    81f8:	80c00003 	ldbu	r3,0(r16)
    81fc:	94800044 	addi	r18,r18,1
    8200:	84000044 	addi	r16,r16,1
    8204:	18803fcc 	andi	r2,r3,255
    8208:	1080201c 	xori	r2,r2,128
    820c:	10bfe004 	addi	r2,r2,-128
    8210:	103fec1e 	bne	r2,zero,81c4 <___vfprintf_internal_r+0x84>
    8214:	9005883a 	mov	r2,r18
    8218:	dfc01d17 	ldw	ra,116(sp)
    821c:	df001c17 	ldw	fp,112(sp)
    8220:	ddc01b17 	ldw	r23,108(sp)
    8224:	dd801a17 	ldw	r22,104(sp)
    8228:	dd401917 	ldw	r21,100(sp)
    822c:	dd001817 	ldw	r20,96(sp)
    8230:	dcc01717 	ldw	r19,92(sp)
    8234:	dc801617 	ldw	r18,88(sp)
    8238:	dc401517 	ldw	r17,84(sp)
    823c:	dc001417 	ldw	r16,80(sp)
    8240:	dec01e04 	addi	sp,sp,120
    8244:	f800283a 	ret
    8248:	01000084 	movi	r4,2
    824c:	a9001126 	beq	r21,r4,8294 <___vfprintf_internal_r+0x154>
    8250:	010000c4 	movi	r4,3
    8254:	a93fd51e 	bne	r21,r4,81ac <___vfprintf_internal_r+0x6c>
    8258:	193ff404 	addi	r4,r3,-48
    825c:	21003fcc 	andi	r4,r4,255
    8260:	01400244 	movi	r5,9
    8264:	29001936 	bltu	r5,r4,82cc <___vfprintf_internal_r+0x18c>
    8268:	d8c00b17 	ldw	r3,44(sp)
    826c:	00bfffc4 	movi	r2,-1
    8270:	1880e126 	beq	r3,r2,85f8 <___vfprintf_internal_r+0x4b8>
    8274:	188002a4 	muli	r2,r3,10
    8278:	2089883a 	add	r4,r4,r2
    827c:	d9000b15 	stw	r4,44(sp)
    8280:	003fca06 	br	81ac <___vfprintf_internal_r+0x6c>
    8284:	01000c04 	movi	r4,48
    8288:	1100d626 	beq	r2,r4,85e4 <___vfprintf_internal_r+0x4a4>
    828c:	01000944 	movi	r4,37
    8290:	1100f026 	beq	r2,r4,8654 <___vfprintf_internal_r+0x514>
    8294:	193ff404 	addi	r4,r3,-48
    8298:	21003fcc 	andi	r4,r4,255
    829c:	01400244 	movi	r5,9
    82a0:	29000836 	bltu	r5,r4,82c4 <___vfprintf_internal_r+0x184>
    82a4:	d8c00c17 	ldw	r3,48(sp)
    82a8:	00bfffc4 	movi	r2,-1
    82ac:	1880d026 	beq	r3,r2,85f0 <___vfprintf_internal_r+0x4b0>
    82b0:	188002a4 	muli	r2,r3,10
    82b4:	2089883a 	add	r4,r4,r2
    82b8:	d9000c15 	stw	r4,48(sp)
    82bc:	05400084 	movi	r21,2
    82c0:	003fba06 	br	81ac <___vfprintf_internal_r+0x6c>
    82c4:	01000b84 	movi	r4,46
    82c8:	1100a526 	beq	r2,r4,8560 <___vfprintf_internal_r+0x420>
    82cc:	01001b04 	movi	r4,108
    82d0:	1100a126 	beq	r2,r4,8558 <___vfprintf_internal_r+0x418>
    82d4:	d9400b17 	ldw	r5,44(sp)
    82d8:	00bfffc4 	movi	r2,-1
    82dc:	2880da26 	beq	r5,r2,8648 <___vfprintf_internal_r+0x508>
    82e0:	d8001015 	stw	zero,64(sp)
    82e4:	18ffea04 	addi	r3,r3,-88
    82e8:	18c03fcc 	andi	r3,r3,255
    82ec:	00800804 	movi	r2,32
    82f0:	10c0022e 	bgeu	r2,r3,82fc <___vfprintf_internal_r+0x1bc>
    82f4:	002b883a 	mov	r21,zero
    82f8:	003fac06 	br	81ac <___vfprintf_internal_r+0x6c>
    82fc:	18c7883a 	add	r3,r3,r3
    8300:	18c7883a 	add	r3,r3,r3
    8304:	01000074 	movhi	r4,1
    8308:	2120c604 	addi	r4,r4,-31976
    830c:	1907883a 	add	r3,r3,r4
    8310:	18800017 	ldw	r2,0(r3)
    8314:	1000683a 	jmp	r2
    8318:	00008680 	call	868 <__alt_mem_epcs_flash+0x868>
    831c:	000082f4 	movhi	zero,523
    8320:	000082f4 	movhi	zero,523
    8324:	000082f4 	movhi	zero,523
    8328:	000082f4 	movhi	zero,523
    832c:	000082f4 	movhi	zero,523
    8330:	000082f4 	movhi	zero,523
    8334:	000082f4 	movhi	zero,523
    8338:	000082f4 	movhi	zero,523
    833c:	000082f4 	movhi	zero,523
    8340:	000082f4 	movhi	zero,523
    8344:	00008690 	cmplti	zero,zero,538
    8348:	0000839c 	xori	zero,zero,526
    834c:	000082f4 	movhi	zero,523
    8350:	000082f4 	movhi	zero,523
    8354:	000082f4 	movhi	zero,523
    8358:	000082f4 	movhi	zero,523
    835c:	0000839c 	xori	zero,zero,526
    8360:	000082f4 	movhi	zero,523
    8364:	000082f4 	movhi	zero,523
    8368:	000082f4 	movhi	zero,523
    836c:	000082f4 	movhi	zero,523
    8370:	000082f4 	movhi	zero,523
    8374:	00008470 	cmpltui	zero,zero,529
    8378:	000082f4 	movhi	zero,523
    837c:	000082f4 	movhi	zero,523
    8380:	000082f4 	movhi	zero,523
    8384:	000086d8 	cmpnei	zero,zero,539
    8388:	000082f4 	movhi	zero,523
    838c:	00008474 	movhi	zero,529
    8390:	000082f4 	movhi	zero,523
    8394:	000082f4 	movhi	zero,523
    8398:	00008688 	cmpgei	zero,zero,538
    839c:	d8c00d17 	ldw	r3,52(sp)
    83a0:	18003426 	beq	r3,zero,8474 <___vfprintf_internal_r+0x334>
    83a4:	d9000e17 	ldw	r4,56(sp)
    83a8:	00c00044 	movi	r3,1
    83ac:	25800017 	ldw	r22,0(r4)
    83b0:	21000104 	addi	r4,r4,4
    83b4:	d9000e15 	stw	r4,56(sp)
    83b8:	d8c00d15 	stw	r3,52(sp)
    83bc:	b0010b16 	blt	r22,zero,87ec <___vfprintf_internal_r+0x6ac>
    83c0:	d8001215 	stw	zero,72(sp)
    83c4:	d82b883a 	mov	r21,sp
    83c8:	b000321e 	bne	r22,zero,8494 <___vfprintf_internal_r+0x354>
    83cc:	d8c00b17 	ldw	r3,44(sp)
    83d0:	d809883a 	mov	r4,sp
    83d4:	00c00b0e 	bge	zero,r3,8404 <___vfprintf_internal_r+0x2c4>
    83d8:	d8800b17 	ldw	r2,44(sp)
    83dc:	d82b883a 	mov	r21,sp
    83e0:	00c00c04 	movi	r3,48
    83e4:	00000206 	br	83f0 <___vfprintf_internal_r+0x2b0>
    83e8:	d9400a17 	ldw	r5,40(sp)
    83ec:	a9400426 	beq	r21,r5,8400 <___vfprintf_internal_r+0x2c0>
    83f0:	a8c00005 	stb	r3,0(r21)
    83f4:	10bfffc4 	addi	r2,r2,-1
    83f8:	ad400044 	addi	r21,r21,1
    83fc:	103ffa1e 	bne	r2,zero,83e8 <___vfprintf_internal_r+0x2a8>
    8400:	a92dc83a 	sub	r22,r21,r4
    8404:	d8c01217 	ldw	r3,72(sp)
    8408:	b0c5883a 	add	r2,r22,r3
    840c:	d8c00c17 	ldw	r3,48(sp)
    8410:	1885c83a 	sub	r2,r3,r2
    8414:	d8c01017 	ldw	r3,64(sp)
    8418:	d8800f15 	stw	r2,60(sp)
    841c:	18007826 	beq	r3,zero,8600 <___vfprintf_internal_r+0x4c0>
    8420:	d8c01217 	ldw	r3,72(sp)
    8424:	1800e41e 	bne	r3,zero,87b8 <___vfprintf_internal_r+0x678>
    8428:	d8c00f17 	ldw	r3,60(sp)
    842c:	00c05c0e 	bge	zero,r3,85a0 <___vfprintf_internal_r+0x460>
    8430:	00800c04 	movi	r2,48
    8434:	d88008c5 	stb	r2,35(sp)
    8438:	1c7fffc4 	addi	r17,r3,-1
    843c:	00000306 	br	844c <___vfprintf_internal_r+0x30c>
    8440:	8c7fffc4 	addi	r17,r17,-1
    8444:	013fffc4 	movi	r4,-1
    8448:	8900eb26 	beq	r17,r4,87f8 <___vfprintf_internal_r+0x6b8>
    844c:	b8800117 	ldw	r2,4(r23)
    8450:	e009883a 	mov	r4,fp
    8454:	b80b883a 	mov	r5,r23
    8458:	d98008c4 	addi	r6,sp,35
    845c:	01c00044 	movi	r7,1
    8460:	103ee83a 	callr	r2
    8464:	103ff626 	beq	r2,zero,8440 <___vfprintf_internal_r+0x300>
    8468:	04bfffc4 	movi	r18,-1
    846c:	003f6906 	br	8214 <___vfprintf_internal_r+0xd4>
    8470:	05000204 	movi	r20,8
    8474:	d9400e17 	ldw	r5,56(sp)
    8478:	2d800017 	ldw	r22,0(r5)
    847c:	29400104 	addi	r5,r5,4
    8480:	d9400e15 	stw	r5,56(sp)
    8484:	d8000d15 	stw	zero,52(sp)
    8488:	d8001215 	stw	zero,72(sp)
    848c:	d82b883a 	mov	r21,sp
    8490:	b03fce26 	beq	r22,zero,83cc <___vfprintf_internal_r+0x28c>
    8494:	9005883a 	mov	r2,r18
    8498:	dc000f15 	stw	r16,60(sp)
    849c:	a025883a 	mov	r18,r20
    84a0:	04400244 	movi	r17,9
    84a4:	dc001317 	ldw	r16,76(sp)
    84a8:	1029883a 	mov	r20,r2
    84ac:	00000506 	br	84c4 <___vfprintf_internal_r+0x384>
    84b0:	b5800c04 	addi	r22,r22,48
    84b4:	ad800005 	stb	r22,0(r21)
    84b8:	102d883a 	mov	r22,r2
    84bc:	ad400044 	addi	r21,r21,1
    84c0:	10000c26 	beq	r2,zero,84f4 <___vfprintf_internal_r+0x3b4>
    84c4:	b009883a 	mov	r4,r22
    84c8:	900b883a 	mov	r5,r18
    84cc:	0008abc0 	call	8abc <__udivsi3>
    84d0:	9089383a 	mul	r4,r18,r2
    84d4:	b12dc83a 	sub	r22,r22,r4
    84d8:	8dbff50e 	bge	r17,r22,84b0 <___vfprintf_internal_r+0x370>
    84dc:	80001126 	beq	r16,zero,8524 <___vfprintf_internal_r+0x3e4>
    84e0:	b5800dc4 	addi	r22,r22,55
    84e4:	ad800005 	stb	r22,0(r21)
    84e8:	102d883a 	mov	r22,r2
    84ec:	ad400044 	addi	r21,r21,1
    84f0:	103ff41e 	bne	r2,zero,84c4 <___vfprintf_internal_r+0x384>
    84f4:	d8c00b17 	ldw	r3,44(sp)
    84f8:	a005883a 	mov	r2,r20
    84fc:	aeedc83a 	sub	r22,r21,sp
    8500:	9029883a 	mov	r20,r18
    8504:	1025883a 	mov	r18,r2
    8508:	1d85c83a 	sub	r2,r3,r22
    850c:	dc000f17 	ldw	r16,60(sp)
    8510:	d809883a 	mov	r4,sp
    8514:	00bfbb0e 	bge	zero,r2,8404 <___vfprintf_internal_r+0x2c4>
    8518:	d8c00a17 	ldw	r3,40(sp)
    851c:	a8ffb036 	bltu	r21,r3,83e0 <___vfprintf_internal_r+0x2a0>
    8520:	003fb806 	br	8404 <___vfprintf_internal_r+0x2c4>
    8524:	b58015c4 	addi	r22,r22,87
    8528:	003fe206 	br	84b4 <___vfprintf_internal_r+0x374>
    852c:	00c00044 	movi	r3,1
    8530:	d8c00d15 	stw	r3,52(sp)
    8534:	00ffffc4 	movi	r3,-1
    8538:	d8c00b15 	stw	r3,44(sp)
    853c:	d8001315 	stw	zero,76(sp)
    8540:	05000284 	movi	r20,10
    8544:	d8c00c15 	stw	r3,48(sp)
    8548:	d8001115 	stw	zero,68(sp)
    854c:	d8001015 	stw	zero,64(sp)
    8550:	dd400d17 	ldw	r21,52(sp)
    8554:	003f1506 	br	81ac <___vfprintf_internal_r+0x6c>
    8558:	00c00044 	movi	r3,1
    855c:	d8c01115 	stw	r3,68(sp)
    8560:	054000c4 	movi	r21,3
    8564:	003f1106 	br	81ac <___vfprintf_internal_r+0x6c>
    8568:	d8c00f17 	ldw	r3,60(sp)
    856c:	90e5883a 	add	r18,r18,r3
    8570:	d8c01217 	ldw	r3,72(sp)
    8574:	18000a26 	beq	r3,zero,85a0 <___vfprintf_internal_r+0x460>
    8578:	b8800117 	ldw	r2,4(r23)
    857c:	00c00b44 	movi	r3,45
    8580:	d8c00905 	stb	r3,36(sp)
    8584:	e009883a 	mov	r4,fp
    8588:	b80b883a 	mov	r5,r23
    858c:	d9800904 	addi	r6,sp,36
    8590:	01c00044 	movi	r7,1
    8594:	103ee83a 	callr	r2
    8598:	103fb31e 	bne	r2,zero,8468 <___vfprintf_internal_r+0x328>
    859c:	94800044 	addi	r18,r18,1
    85a0:	ada3c83a 	sub	r17,r21,r22
    85a4:	05800316 	blt	zero,r22,85b4 <___vfprintf_internal_r+0x474>
    85a8:	003f5206 	br	82f4 <___vfprintf_internal_r+0x1b4>
    85ac:	94800044 	addi	r18,r18,1
    85b0:	ac7f5026 	beq	r21,r17,82f4 <___vfprintf_internal_r+0x1b4>
    85b4:	ad7fffc4 	addi	r21,r21,-1
    85b8:	a8c00003 	ldbu	r3,0(r21)
    85bc:	b8800117 	ldw	r2,4(r23)
    85c0:	e009883a 	mov	r4,fp
    85c4:	d8c00905 	stb	r3,36(sp)
    85c8:	b80b883a 	mov	r5,r23
    85cc:	d9800904 	addi	r6,sp,36
    85d0:	01c00044 	movi	r7,1
    85d4:	103ee83a 	callr	r2
    85d8:	103ff426 	beq	r2,zero,85ac <___vfprintf_internal_r+0x46c>
    85dc:	04bfffc4 	movi	r18,-1
    85e0:	003f0c06 	br	8214 <___vfprintf_internal_r+0xd4>
    85e4:	dd401015 	stw	r21,64(sp)
    85e8:	05400084 	movi	r21,2
    85ec:	003eef06 	br	81ac <___vfprintf_internal_r+0x6c>
    85f0:	0005883a 	mov	r2,zero
    85f4:	003f2f06 	br	82b4 <___vfprintf_internal_r+0x174>
    85f8:	0005883a 	mov	r2,zero
    85fc:	003f1e06 	br	8278 <___vfprintf_internal_r+0x138>
    8600:	d8c00f17 	ldw	r3,60(sp)
    8604:	00ffda0e 	bge	zero,r3,8570 <___vfprintf_internal_r+0x430>
    8608:	00800804 	movi	r2,32
    860c:	d8800885 	stb	r2,34(sp)
    8610:	1c7fffc4 	addi	r17,r3,-1
    8614:	00000306 	br	8624 <___vfprintf_internal_r+0x4e4>
    8618:	8c7fffc4 	addi	r17,r17,-1
    861c:	013fffc4 	movi	r4,-1
    8620:	893fd126 	beq	r17,r4,8568 <___vfprintf_internal_r+0x428>
    8624:	b8800117 	ldw	r2,4(r23)
    8628:	e009883a 	mov	r4,fp
    862c:	b80b883a 	mov	r5,r23
    8630:	d9800884 	addi	r6,sp,34
    8634:	01c00044 	movi	r7,1
    8638:	103ee83a 	callr	r2
    863c:	103ff626 	beq	r2,zero,8618 <___vfprintf_internal_r+0x4d8>
    8640:	04bfffc4 	movi	r18,-1
    8644:	003ef306 	br	8214 <___vfprintf_internal_r+0xd4>
    8648:	00800044 	movi	r2,1
    864c:	d8800b15 	stw	r2,44(sp)
    8650:	003f2406 	br	82e4 <___vfprintf_internal_r+0x1a4>
    8654:	b8c00117 	ldw	r3,4(r23)
    8658:	d8800905 	stb	r2,36(sp)
    865c:	e009883a 	mov	r4,fp
    8660:	b80b883a 	mov	r5,r23
    8664:	d9800904 	addi	r6,sp,36
    8668:	a80f883a 	mov	r7,r21
    866c:	183ee83a 	callr	r3
    8670:	103f7d1e 	bne	r2,zero,8468 <___vfprintf_internal_r+0x328>
    8674:	94800044 	addi	r18,r18,1
    8678:	002b883a 	mov	r21,zero
    867c:	003ecb06 	br	81ac <___vfprintf_internal_r+0x6c>
    8680:	00c00044 	movi	r3,1
    8684:	d8c01315 	stw	r3,76(sp)
    8688:	05000404 	movi	r20,16
    868c:	003f7906 	br	8474 <___vfprintf_internal_r+0x334>
    8690:	d8c00c17 	ldw	r3,48(sp)
    8694:	98c0380e 	bge	r19,r3,8778 <___vfprintf_internal_r+0x638>
    8698:	1dbfffc4 	addi	r22,r3,-1
    869c:	00800804 	movi	r2,32
    86a0:	d8800845 	stb	r2,33(sp)
    86a4:	b023883a 	mov	r17,r22
    86a8:	057fffc4 	movi	r21,-1
    86ac:	8c7fffc4 	addi	r17,r17,-1
    86b0:	8d403026 	beq	r17,r21,8774 <___vfprintf_internal_r+0x634>
    86b4:	b8800117 	ldw	r2,4(r23)
    86b8:	e009883a 	mov	r4,fp
    86bc:	b80b883a 	mov	r5,r23
    86c0:	d9800844 	addi	r6,sp,33
    86c4:	01c00044 	movi	r7,1
    86c8:	103ee83a 	callr	r2
    86cc:	103ff726 	beq	r2,zero,86ac <___vfprintf_internal_r+0x56c>
    86d0:	04bfffc4 	movi	r18,-1
    86d4:	003ecf06 	br	8214 <___vfprintf_internal_r+0xd4>
    86d8:	d9000e17 	ldw	r4,56(sp)
    86dc:	d8c00e17 	ldw	r3,56(sp)
    86e0:	21000017 	ldw	r4,0(r4)
    86e4:	18c00104 	addi	r3,r3,4
    86e8:	d8c00e15 	stw	r3,56(sp)
    86ec:	d9000f15 	stw	r4,60(sp)
    86f0:	00089080 	call	8908 <strlen>
    86f4:	d8c00c17 	ldw	r3,48(sp)
    86f8:	102d883a 	mov	r22,r2
    86fc:	1887c83a 	sub	r3,r3,r2
    8700:	d8c01215 	stw	r3,72(sp)
    8704:	00c0110e 	bge	zero,r3,874c <___vfprintf_internal_r+0x60c>
    8708:	00800804 	movi	r2,32
    870c:	d8800805 	stb	r2,32(sp)
    8710:	1c7fffc4 	addi	r17,r3,-1
    8714:	057fffc4 	movi	r21,-1
    8718:	00000206 	br	8724 <___vfprintf_internal_r+0x5e4>
    871c:	8c7fffc4 	addi	r17,r17,-1
    8720:	8d400826 	beq	r17,r21,8744 <___vfprintf_internal_r+0x604>
    8724:	b8800117 	ldw	r2,4(r23)
    8728:	e009883a 	mov	r4,fp
    872c:	b80b883a 	mov	r5,r23
    8730:	d9800804 	addi	r6,sp,32
    8734:	01c00044 	movi	r7,1
    8738:	103ee83a 	callr	r2
    873c:	103ff726 	beq	r2,zero,871c <___vfprintf_internal_r+0x5dc>
    8740:	003f4906 	br	8468 <___vfprintf_internal_r+0x328>
    8744:	d8c01217 	ldw	r3,72(sp)
    8748:	90e5883a 	add	r18,r18,r3
    874c:	b8800117 	ldw	r2,4(r23)
    8750:	d9800f17 	ldw	r6,60(sp)
    8754:	e009883a 	mov	r4,fp
    8758:	b80b883a 	mov	r5,r23
    875c:	b00f883a 	mov	r7,r22
    8760:	103ee83a 	callr	r2
    8764:	103f401e 	bne	r2,zero,8468 <___vfprintf_internal_r+0x328>
    8768:	95a5883a 	add	r18,r18,r22
    876c:	002b883a 	mov	r21,zero
    8770:	003e8e06 	br	81ac <___vfprintf_internal_r+0x6c>
    8774:	95a5883a 	add	r18,r18,r22
    8778:	d9000e17 	ldw	r4,56(sp)
    877c:	b8800117 	ldw	r2,4(r23)
    8780:	b80b883a 	mov	r5,r23
    8784:	20c00017 	ldw	r3,0(r4)
    8788:	d9800904 	addi	r6,sp,36
    878c:	e009883a 	mov	r4,fp
    8790:	d8c00905 	stb	r3,36(sp)
    8794:	d8c00e17 	ldw	r3,56(sp)
    8798:	01c00044 	movi	r7,1
    879c:	1c400104 	addi	r17,r3,4
    87a0:	103ee83a 	callr	r2
    87a4:	103f301e 	bne	r2,zero,8468 <___vfprintf_internal_r+0x328>
    87a8:	94800044 	addi	r18,r18,1
    87ac:	dc400e15 	stw	r17,56(sp)
    87b0:	002b883a 	mov	r21,zero
    87b4:	003e7d06 	br	81ac <___vfprintf_internal_r+0x6c>
    87b8:	b8800117 	ldw	r2,4(r23)
    87bc:	00c00b44 	movi	r3,45
    87c0:	d8c00905 	stb	r3,36(sp)
    87c4:	e009883a 	mov	r4,fp
    87c8:	b80b883a 	mov	r5,r23
    87cc:	d9800904 	addi	r6,sp,36
    87d0:	01c00044 	movi	r7,1
    87d4:	103ee83a 	callr	r2
    87d8:	103f231e 	bne	r2,zero,8468 <___vfprintf_internal_r+0x328>
    87dc:	d8c00f17 	ldw	r3,60(sp)
    87e0:	94800044 	addi	r18,r18,1
    87e4:	00ff1216 	blt	zero,r3,8430 <___vfprintf_internal_r+0x2f0>
    87e8:	003f6d06 	br	85a0 <___vfprintf_internal_r+0x460>
    87ec:	05adc83a 	sub	r22,zero,r22
    87f0:	d8c01215 	stw	r3,72(sp)
    87f4:	003f2506 	br	848c <___vfprintf_internal_r+0x34c>
    87f8:	d8c00f17 	ldw	r3,60(sp)
    87fc:	90e5883a 	add	r18,r18,r3
    8800:	003f6706 	br	85a0 <___vfprintf_internal_r+0x460>

00008804 <__vfprintf_internal>:
    8804:	00800074 	movhi	r2,1
    8808:	10a81004 	addi	r2,r2,-24512
    880c:	2007883a 	mov	r3,r4
    8810:	11000017 	ldw	r4,0(r2)
    8814:	2805883a 	mov	r2,r5
    8818:	300f883a 	mov	r7,r6
    881c:	180b883a 	mov	r5,r3
    8820:	100d883a 	mov	r6,r2
    8824:	00081401 	jmpi	8140 <___vfprintf_internal_r>

00008828 <__sfvwrite_small_dev>:
    8828:	2880000b 	ldhu	r2,0(r5)
    882c:	defffa04 	addi	sp,sp,-24
    8830:	dcc00315 	stw	r19,12(sp)
    8834:	10c0020c 	andi	r3,r2,8
    8838:	18ffffcc 	andi	r3,r3,65535
    883c:	18e0001c 	xori	r3,r3,32768
    8840:	dc800215 	stw	r18,8(sp)
    8844:	dc400115 	stw	r17,4(sp)
    8848:	dfc00515 	stw	ra,20(sp)
    884c:	dd000415 	stw	r20,16(sp)
    8850:	dc000015 	stw	r16,0(sp)
    8854:	18e00004 	addi	r3,r3,-32768
    8858:	2825883a 	mov	r18,r5
    885c:	2027883a 	mov	r19,r4
    8860:	3023883a 	mov	r17,r6
    8864:	18002626 	beq	r3,zero,8900 <__sfvwrite_small_dev+0xd8>
    8868:	2940008f 	ldh	r5,2(r5)
    886c:	28001016 	blt	r5,zero,88b0 <__sfvwrite_small_dev+0x88>
    8870:	01c01a0e 	bge	zero,r7,88dc <__sfvwrite_small_dev+0xb4>
    8874:	3821883a 	mov	r16,r7
    8878:	05010004 	movi	r20,1024
    887c:	00000306 	br	888c <__sfvwrite_small_dev+0x64>
    8880:	88a3883a 	add	r17,r17,r2
    8884:	0400150e 	bge	zero,r16,88dc <__sfvwrite_small_dev+0xb4>
    8888:	9140008f 	ldh	r5,2(r18)
    888c:	880d883a 	mov	r6,r17
    8890:	9809883a 	mov	r4,r19
    8894:	800f883a 	mov	r7,r16
    8898:	a400010e 	bge	r20,r16,88a0 <__sfvwrite_small_dev+0x78>
    889c:	01c10004 	movi	r7,1024
    88a0:	00089300 	call	8930 <_write_r>
    88a4:	80a1c83a 	sub	r16,r16,r2
    88a8:	00bff516 	blt	zero,r2,8880 <__sfvwrite_small_dev+0x58>
    88ac:	9080000b 	ldhu	r2,0(r18)
    88b0:	10801014 	ori	r2,r2,64
    88b4:	9080000d 	sth	r2,0(r18)
    88b8:	00bfffc4 	movi	r2,-1
    88bc:	dfc00517 	ldw	ra,20(sp)
    88c0:	dd000417 	ldw	r20,16(sp)
    88c4:	dcc00317 	ldw	r19,12(sp)
    88c8:	dc800217 	ldw	r18,8(sp)
    88cc:	dc400117 	ldw	r17,4(sp)
    88d0:	dc000017 	ldw	r16,0(sp)
    88d4:	dec00604 	addi	sp,sp,24
    88d8:	f800283a 	ret
    88dc:	0005883a 	mov	r2,zero
    88e0:	dfc00517 	ldw	ra,20(sp)
    88e4:	dd000417 	ldw	r20,16(sp)
    88e8:	dcc00317 	ldw	r19,12(sp)
    88ec:	dc800217 	ldw	r18,8(sp)
    88f0:	dc400117 	ldw	r17,4(sp)
    88f4:	dc000017 	ldw	r16,0(sp)
    88f8:	dec00604 	addi	sp,sp,24
    88fc:	f800283a 	ret
    8900:	00bfffc4 	movi	r2,-1
    8904:	003fed06 	br	88bc <__sfvwrite_small_dev+0x94>

00008908 <strlen>:
    8908:	20800007 	ldb	r2,0(r4)
    890c:	10000626 	beq	r2,zero,8928 <strlen+0x20>
    8910:	2005883a 	mov	r2,r4
    8914:	10800044 	addi	r2,r2,1
    8918:	10c00007 	ldb	r3,0(r2)
    891c:	183ffd1e 	bne	r3,zero,8914 <strlen+0xc>
    8920:	1105c83a 	sub	r2,r2,r4
    8924:	f800283a 	ret
    8928:	0005883a 	mov	r2,zero
    892c:	f800283a 	ret

00008930 <_write_r>:
    8930:	defffd04 	addi	sp,sp,-12
    8934:	dc400115 	stw	r17,4(sp)
    8938:	dc000015 	stw	r16,0(sp)
    893c:	2023883a 	mov	r17,r4
    8940:	04000074 	movhi	r16,1
    8944:	84281904 	addi	r16,r16,-24476
    8948:	2809883a 	mov	r4,r5
    894c:	300b883a 	mov	r5,r6
    8950:	380d883a 	mov	r6,r7
    8954:	dfc00215 	stw	ra,8(sp)
    8958:	80000015 	stw	zero,0(r16)
    895c:	0008b940 	call	8b94 <write>
    8960:	00ffffc4 	movi	r3,-1
    8964:	10c00526 	beq	r2,r3,897c <_write_r+0x4c>
    8968:	dfc00217 	ldw	ra,8(sp)
    896c:	dc400117 	ldw	r17,4(sp)
    8970:	dc000017 	ldw	r16,0(sp)
    8974:	dec00304 	addi	sp,sp,12
    8978:	f800283a 	ret
    897c:	80c00017 	ldw	r3,0(r16)
    8980:	183ff926 	beq	r3,zero,8968 <_write_r+0x38>
    8984:	88c00015 	stw	r3,0(r17)
    8988:	dfc00217 	ldw	ra,8(sp)
    898c:	dc400117 	ldw	r17,4(sp)
    8990:	dc000017 	ldw	r16,0(sp)
    8994:	dec00304 	addi	sp,sp,12
    8998:	f800283a 	ret

0000899c <udivmodsi4>:
    899c:	2005883a 	mov	r2,r4
    89a0:	2900182e 	bgeu	r5,r4,8a04 <udivmodsi4+0x68>
    89a4:	28001716 	blt	r5,zero,8a04 <udivmodsi4+0x68>
    89a8:	01000804 	movi	r4,32
    89ac:	00c00044 	movi	r3,1
    89b0:	00000206 	br	89bc <udivmodsi4+0x20>
    89b4:	20001126 	beq	r4,zero,89fc <udivmodsi4+0x60>
    89b8:	28000516 	blt	r5,zero,89d0 <udivmodsi4+0x34>
    89bc:	294b883a 	add	r5,r5,r5
    89c0:	213fffc4 	addi	r4,r4,-1
    89c4:	18c7883a 	add	r3,r3,r3
    89c8:	28bffa36 	bltu	r5,r2,89b4 <udivmodsi4+0x18>
    89cc:	18000b26 	beq	r3,zero,89fc <udivmodsi4+0x60>
    89d0:	0009883a 	mov	r4,zero
    89d4:	11400236 	bltu	r2,r5,89e0 <udivmodsi4+0x44>
    89d8:	1145c83a 	sub	r2,r2,r5
    89dc:	20c8b03a 	or	r4,r4,r3
    89e0:	1806d07a 	srli	r3,r3,1
    89e4:	280ad07a 	srli	r5,r5,1
    89e8:	183ffa1e 	bne	r3,zero,89d4 <udivmodsi4+0x38>
    89ec:	3000021e 	bne	r6,zero,89f8 <udivmodsi4+0x5c>
    89f0:	2005883a 	mov	r2,r4
    89f4:	f800283a 	ret
    89f8:	f800283a 	ret
    89fc:	0009883a 	mov	r4,zero
    8a00:	003ffa06 	br	89ec <udivmodsi4+0x50>
    8a04:	00c00044 	movi	r3,1
    8a08:	0009883a 	mov	r4,zero
    8a0c:	003ff106 	br	89d4 <udivmodsi4+0x38>

00008a10 <__divsi3>:
    8a10:	defffe04 	addi	sp,sp,-8
    8a14:	dfc00115 	stw	ra,4(sp)
    8a18:	dc000015 	stw	r16,0(sp)
    8a1c:	20000a16 	blt	r4,zero,8a48 <__divsi3+0x38>
    8a20:	0021883a 	mov	r16,zero
    8a24:	28000b16 	blt	r5,zero,8a54 <__divsi3+0x44>
    8a28:	000d883a 	mov	r6,zero
    8a2c:	000899c0 	call	899c <udivmodsi4>
    8a30:	80000126 	beq	r16,zero,8a38 <__divsi3+0x28>
    8a34:	0085c83a 	sub	r2,zero,r2
    8a38:	dfc00117 	ldw	ra,4(sp)
    8a3c:	dc000017 	ldw	r16,0(sp)
    8a40:	dec00204 	addi	sp,sp,8
    8a44:	f800283a 	ret
    8a48:	0109c83a 	sub	r4,zero,r4
    8a4c:	04000044 	movi	r16,1
    8a50:	283ff50e 	bge	r5,zero,8a28 <__divsi3+0x18>
    8a54:	014bc83a 	sub	r5,zero,r5
    8a58:	8400005c 	xori	r16,r16,1
    8a5c:	003ff206 	br	8a28 <__divsi3+0x18>

00008a60 <__modsi3>:
    8a60:	deffff04 	addi	sp,sp,-4
    8a64:	dfc00015 	stw	ra,0(sp)
    8a68:	20000516 	blt	r4,zero,8a80 <__modsi3+0x20>
    8a6c:	28000c16 	blt	r5,zero,8aa0 <__modsi3+0x40>
    8a70:	01800044 	movi	r6,1
    8a74:	dfc00017 	ldw	ra,0(sp)
    8a78:	dec00104 	addi	sp,sp,4
    8a7c:	000899c1 	jmpi	899c <udivmodsi4>
    8a80:	0109c83a 	sub	r4,zero,r4
    8a84:	28000b16 	blt	r5,zero,8ab4 <__modsi3+0x54>
    8a88:	01800044 	movi	r6,1
    8a8c:	000899c0 	call	899c <udivmodsi4>
    8a90:	0085c83a 	sub	r2,zero,r2
    8a94:	dfc00017 	ldw	ra,0(sp)
    8a98:	dec00104 	addi	sp,sp,4
    8a9c:	f800283a 	ret
    8aa0:	014bc83a 	sub	r5,zero,r5
    8aa4:	01800044 	movi	r6,1
    8aa8:	dfc00017 	ldw	ra,0(sp)
    8aac:	dec00104 	addi	sp,sp,4
    8ab0:	000899c1 	jmpi	899c <udivmodsi4>
    8ab4:	014bc83a 	sub	r5,zero,r5
    8ab8:	003ff306 	br	8a88 <__modsi3+0x28>

00008abc <__udivsi3>:
    8abc:	000d883a 	mov	r6,zero
    8ac0:	000899c1 	jmpi	899c <udivmodsi4>

00008ac4 <__umodsi3>:
    8ac4:	01800044 	movi	r6,1
    8ac8:	000899c1 	jmpi	899c <udivmodsi4>

00008acc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8acc:	defffd04 	addi	sp,sp,-12
    8ad0:	dfc00215 	stw	ra,8(sp)
    8ad4:	df000115 	stw	fp,4(sp)
    8ad8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8adc:	0009883a 	mov	r4,zero
    8ae0:	0008cb80 	call	8cb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8ae4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ae8:	0008cec0 	call	8cec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8aec:	01000074 	movhi	r4,1
    8af0:	21275704 	addi	r4,r4,-25252
    8af4:	01400074 	movhi	r5,1
    8af8:	29675704 	addi	r5,r5,-25252
    8afc:	01800074 	movhi	r6,1
    8b00:	31a75704 	addi	r6,r6,-25252
    8b04:	00093740 	call	9374 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8b08:	00091fc0 	call	91fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8b0c:	01000074 	movhi	r4,1
    8b10:	21249604 	addi	r4,r4,-28072
    8b14:	00099340 	call	9934 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8b18:	d1200b17 	ldw	r4,-32724(gp)
    8b1c:	d0e00c17 	ldw	r3,-32720(gp)
    8b20:	d0a00d17 	ldw	r2,-32716(gp)
    8b24:	180b883a 	mov	r5,r3
    8b28:	100d883a 	mov	r6,r2
    8b2c:	00080680 	call	8068 <main>
    8b30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8b34:	01000044 	movi	r4,1
    8b38:	00090180 	call	9018 <close>
  exit (result);
    8b3c:	e13fff17 	ldw	r4,-4(fp)
    8b40:	00099480 	call	9948 <exit>

00008b44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8b44:	defffe04 	addi	sp,sp,-8
    8b48:	dfc00115 	stw	ra,4(sp)
    8b4c:	df000015 	stw	fp,0(sp)
    8b50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8b54:	00800074 	movhi	r2,1
    8b58:	10a81804 	addi	r2,r2,-24480
    8b5c:	10800017 	ldw	r2,0(r2)
    8b60:	10000526 	beq	r2,zero,8b78 <alt_get_errno+0x34>
    8b64:	00800074 	movhi	r2,1
    8b68:	10a81804 	addi	r2,r2,-24480
    8b6c:	10800017 	ldw	r2,0(r2)
    8b70:	103ee83a 	callr	r2
    8b74:	00000206 	br	8b80 <alt_get_errno+0x3c>
    8b78:	00800074 	movhi	r2,1
    8b7c:	10a81904 	addi	r2,r2,-24476
}
    8b80:	e037883a 	mov	sp,fp
    8b84:	dfc00117 	ldw	ra,4(sp)
    8b88:	df000017 	ldw	fp,0(sp)
    8b8c:	dec00204 	addi	sp,sp,8
    8b90:	f800283a 	ret

00008b94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8b94:	defff904 	addi	sp,sp,-28
    8b98:	dfc00615 	stw	ra,24(sp)
    8b9c:	df000515 	stw	fp,20(sp)
    8ba0:	df000504 	addi	fp,sp,20
    8ba4:	e13ffd15 	stw	r4,-12(fp)
    8ba8:	e17ffe15 	stw	r5,-8(fp)
    8bac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8bb0:	e0bffd17 	ldw	r2,-12(fp)
    8bb4:	10000616 	blt	r2,zero,8bd0 <write+0x3c>
    8bb8:	e0bffd17 	ldw	r2,-12(fp)
    8bbc:	10c00324 	muli	r3,r2,12
    8bc0:	00800074 	movhi	r2,1
    8bc4:	10a7af04 	addi	r2,r2,-24900
    8bc8:	1885883a 	add	r2,r3,r2
    8bcc:	00000106 	br	8bd4 <write+0x40>
    8bd0:	0005883a 	mov	r2,zero
    8bd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8bd8:	e0bffb17 	ldw	r2,-20(fp)
    8bdc:	10001f26 	beq	r2,zero,8c5c <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8be0:	e0bffb17 	ldw	r2,-20(fp)
    8be4:	10800217 	ldw	r2,8(r2)
    8be8:	108000cc 	andi	r2,r2,3
    8bec:	10001726 	beq	r2,zero,8c4c <write+0xb8>
    8bf0:	e0bffb17 	ldw	r2,-20(fp)
    8bf4:	10800017 	ldw	r2,0(r2)
    8bf8:	10800617 	ldw	r2,24(r2)
    8bfc:	10001326 	beq	r2,zero,8c4c <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8c00:	e0bffb17 	ldw	r2,-20(fp)
    8c04:	10800017 	ldw	r2,0(r2)
    8c08:	10c00617 	ldw	r3,24(r2)
    8c0c:	e0bfff17 	ldw	r2,-4(fp)
    8c10:	e13ffb17 	ldw	r4,-20(fp)
    8c14:	e17ffe17 	ldw	r5,-8(fp)
    8c18:	100d883a 	mov	r6,r2
    8c1c:	183ee83a 	callr	r3
    8c20:	e0bffc15 	stw	r2,-16(fp)
    8c24:	e0bffc17 	ldw	r2,-16(fp)
    8c28:	1000060e 	bge	r2,zero,8c44 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    8c2c:	0008b440 	call	8b44 <alt_get_errno>
    8c30:	e0fffc17 	ldw	r3,-16(fp)
    8c34:	00c7c83a 	sub	r3,zero,r3
    8c38:	10c00015 	stw	r3,0(r2)
        return -1;
    8c3c:	00bfffc4 	movi	r2,-1
    8c40:	00000a06 	br	8c6c <write+0xd8>
      }
      return rval;
    8c44:	e0bffc17 	ldw	r2,-16(fp)
    8c48:	00000806 	br	8c6c <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8c4c:	0008b440 	call	8b44 <alt_get_errno>
    8c50:	00c00344 	movi	r3,13
    8c54:	10c00015 	stw	r3,0(r2)
    8c58:	00000306 	br	8c68 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8c5c:	0008b440 	call	8b44 <alt_get_errno>
    8c60:	00c01444 	movi	r3,81
    8c64:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    8c68:	00bfffc4 	movi	r2,-1
}
    8c6c:	e037883a 	mov	sp,fp
    8c70:	dfc00117 	ldw	ra,4(sp)
    8c74:	df000017 	ldw	fp,0(sp)
    8c78:	dec00204 	addi	sp,sp,8
    8c7c:	f800283a 	ret

00008c80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8c80:	defffd04 	addi	sp,sp,-12
    8c84:	dfc00215 	stw	ra,8(sp)
    8c88:	df000115 	stw	fp,4(sp)
    8c8c:	df000104 	addi	fp,sp,4
    8c90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8c94:	e13fff17 	ldw	r4,-4(fp)
    8c98:	01400074 	movhi	r5,1
    8c9c:	29681504 	addi	r5,r5,-24492
    8ca0:	000915c0 	call	915c <alt_dev_llist_insert>
}
    8ca4:	e037883a 	mov	sp,fp
    8ca8:	dfc00117 	ldw	ra,4(sp)
    8cac:	df000017 	ldw	fp,0(sp)
    8cb0:	dec00204 	addi	sp,sp,8
    8cb4:	f800283a 	ret

00008cb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8cb8:	defffd04 	addi	sp,sp,-12
    8cbc:	dfc00215 	stw	ra,8(sp)
    8cc0:	df000115 	stw	fp,4(sp)
    8cc4:	df000104 	addi	fp,sp,4
    8cc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    8ccc:	00096bc0 	call	96bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8cd0:	00800044 	movi	r2,1
    8cd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8cd8:	e037883a 	mov	sp,fp
    8cdc:	dfc00117 	ldw	ra,4(sp)
    8ce0:	df000017 	ldw	fp,0(sp)
    8ce4:	dec00204 	addi	sp,sp,8
    8ce8:	f800283a 	ret

00008cec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8cec:	defffe04 	addi	sp,sp,-8
    8cf0:	dfc00115 	stw	ra,4(sp)
    8cf4:	df000015 	stw	fp,0(sp)
    8cf8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
    8cfc:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    8d00:	01000074 	movhi	r4,1
    8d04:	21279a04 	addi	r4,r4,-24984
    8d08:	0008c800 	call	8c80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    8d0c:	0001883a 	nop
    LED_INIT ( LED, Led);
    8d10:	0001883a 	nop
    MY9262_INIT ( MY9262, my9262);
    8d14:	0001883a 	nop
}
    8d18:	e037883a 	mov	sp,fp
    8d1c:	dfc00117 	ldw	ra,4(sp)
    8d20:	df000017 	ldw	fp,0(sp)
    8d24:	dec00204 	addi	sp,sp,8
    8d28:	f800283a 	ret

00008d2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8d2c:	defffa04 	addi	sp,sp,-24
    8d30:	dfc00515 	stw	ra,20(sp)
    8d34:	df000415 	stw	fp,16(sp)
    8d38:	df000404 	addi	fp,sp,16
    8d3c:	e13ffd15 	stw	r4,-12(fp)
    8d40:	e17ffe15 	stw	r5,-8(fp)
    8d44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8d48:	e0bffd17 	ldw	r2,-12(fp)
    8d4c:	10800017 	ldw	r2,0(r2)
    8d50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8d54:	e0bffc17 	ldw	r2,-16(fp)
    8d58:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8d5c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8d60:	10800217 	ldw	r2,8(r2)
    8d64:	1809883a 	mov	r4,r3
    8d68:	e17ffe17 	ldw	r5,-8(fp)
    8d6c:	e1bfff17 	ldw	r6,-4(fp)
    8d70:	100f883a 	mov	r7,r2
    8d74:	0008dec0 	call	8dec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8d78:	e037883a 	mov	sp,fp
    8d7c:	dfc00117 	ldw	ra,4(sp)
    8d80:	df000017 	ldw	fp,0(sp)
    8d84:	dec00204 	addi	sp,sp,8
    8d88:	f800283a 	ret

00008d8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8d8c:	defffa04 	addi	sp,sp,-24
    8d90:	dfc00515 	stw	ra,20(sp)
    8d94:	df000415 	stw	fp,16(sp)
    8d98:	df000404 	addi	fp,sp,16
    8d9c:	e13ffd15 	stw	r4,-12(fp)
    8da0:	e17ffe15 	stw	r5,-8(fp)
    8da4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8da8:	e0bffd17 	ldw	r2,-12(fp)
    8dac:	10800017 	ldw	r2,0(r2)
    8db0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8db4:	e0bffc17 	ldw	r2,-16(fp)
    8db8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8dbc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8dc0:	10800217 	ldw	r2,8(r2)
    8dc4:	1809883a 	mov	r4,r3
    8dc8:	e17ffe17 	ldw	r5,-8(fp)
    8dcc:	e1bfff17 	ldw	r6,-4(fp)
    8dd0:	100f883a 	mov	r7,r2
    8dd4:	0008ee00 	call	8ee0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8dec:	defff704 	addi	sp,sp,-36
    8df0:	df000815 	stw	fp,32(sp)
    8df4:	df000804 	addi	fp,sp,32
    8df8:	e13ffc15 	stw	r4,-16(fp)
    8dfc:	e17ffd15 	stw	r5,-12(fp)
    8e00:	e1bffe15 	stw	r6,-8(fp)
    8e04:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8e08:	e0bffc17 	ldw	r2,-16(fp)
    8e0c:	10800017 	ldw	r2,0(r2)
    8e10:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    8e14:	e0bffd17 	ldw	r2,-12(fp)
    8e18:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    8e1c:	e0bffe17 	ldw	r2,-8(fp)
    8e20:	e0fffd17 	ldw	r3,-12(fp)
    8e24:	1885883a 	add	r2,r3,r2
    8e28:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8e2c:	00001406 	br	8e80 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8e30:	e0bff917 	ldw	r2,-28(fp)
    8e34:	10800037 	ldwio	r2,0(r2)
    8e38:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8e3c:	e0bffb17 	ldw	r2,-20(fp)
    8e40:	10a0000c 	andi	r2,r2,32768
    8e44:	10000826 	beq	r2,zero,8e68 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8e48:	e0bffb17 	ldw	r2,-20(fp)
    8e4c:	1007883a 	mov	r3,r2
    8e50:	e0bff817 	ldw	r2,-32(fp)
    8e54:	10c00005 	stb	r3,0(r2)
    8e58:	e0bff817 	ldw	r2,-32(fp)
    8e5c:	10800044 	addi	r2,r2,1
    8e60:	e0bff815 	stw	r2,-32(fp)
    8e64:	00000606 	br	8e80 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    8e68:	e0fff817 	ldw	r3,-32(fp)
    8e6c:	e0bffd17 	ldw	r2,-12(fp)
    8e70:	1880071e 	bne	r3,r2,8e90 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    8e74:	e0bfff17 	ldw	r2,-4(fp)
    8e78:	1090000c 	andi	r2,r2,16384
    8e7c:	1000061e 	bne	r2,zero,8e98 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8e80:	e0fff817 	ldw	r3,-32(fp)
    8e84:	e0bffa17 	ldw	r2,-24(fp)
    8e88:	18bfe936 	bltu	r3,r2,8e30 <altera_avalon_jtag_uart_read+0x44>
    8e8c:	00000306 	br	8e9c <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    8e90:	0001883a 	nop
    8e94:	00000106 	br	8e9c <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    8e98:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8e9c:	e0fff817 	ldw	r3,-32(fp)
    8ea0:	e0bffd17 	ldw	r2,-12(fp)
    8ea4:	18800426 	beq	r3,r2,8eb8 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8ea8:	e0fff817 	ldw	r3,-32(fp)
    8eac:	e0bffd17 	ldw	r2,-12(fp)
    8eb0:	1885c83a 	sub	r2,r3,r2
    8eb4:	00000606 	br	8ed0 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    8eb8:	e0bfff17 	ldw	r2,-4(fp)
    8ebc:	1090000c 	andi	r2,r2,16384
    8ec0:	10000226 	beq	r2,zero,8ecc <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    8ec4:	00bffd44 	movi	r2,-11
    8ec8:	00000106 	br	8ed0 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    8ecc:	00bffec4 	movi	r2,-5
}
    8ed0:	e037883a 	mov	sp,fp
    8ed4:	df000017 	ldw	fp,0(sp)
    8ed8:	dec00104 	addi	sp,sp,4
    8edc:	f800283a 	ret

00008ee0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8ee0:	defff904 	addi	sp,sp,-28
    8ee4:	df000615 	stw	fp,24(sp)
    8ee8:	df000604 	addi	fp,sp,24
    8eec:	e13ffc15 	stw	r4,-16(fp)
    8ef0:	e17ffd15 	stw	r5,-12(fp)
    8ef4:	e1bffe15 	stw	r6,-8(fp)
    8ef8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8efc:	e0bffc17 	ldw	r2,-16(fp)
    8f00:	10800017 	ldw	r2,0(r2)
    8f04:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8f08:	e0bffe17 	ldw	r2,-8(fp)
    8f0c:	e0fffd17 	ldw	r3,-12(fp)
    8f10:	1885883a 	add	r2,r3,r2
    8f14:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    8f18:	00000f06 	br	8f58 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8f1c:	e0bffa17 	ldw	r2,-24(fp)
    8f20:	10800104 	addi	r2,r2,4
    8f24:	10800037 	ldwio	r2,0(r2)
    8f28:	10bfffec 	andhi	r2,r2,65535
    8f2c:	10000a26 	beq	r2,zero,8f58 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8f30:	e0bffa17 	ldw	r2,-24(fp)
    8f34:	e0fffd17 	ldw	r3,-12(fp)
    8f38:	18c00003 	ldbu	r3,0(r3)
    8f3c:	18c03fcc 	andi	r3,r3,255
    8f40:	18c0201c 	xori	r3,r3,128
    8f44:	18ffe004 	addi	r3,r3,-128
    8f48:	e13ffd17 	ldw	r4,-12(fp)
    8f4c:	21000044 	addi	r4,r4,1
    8f50:	e13ffd15 	stw	r4,-12(fp)
    8f54:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8f58:	e0fffd17 	ldw	r3,-12(fp)
    8f5c:	e0bffb17 	ldw	r2,-20(fp)
    8f60:	18bfee36 	bltu	r3,r2,8f1c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8f64:	e0bffe17 	ldw	r2,-8(fp)
}
    8f68:	e037883a 	mov	sp,fp
    8f6c:	df000017 	ldw	fp,0(sp)
    8f70:	dec00104 	addi	sp,sp,4
    8f74:	f800283a 	ret

00008f78 <my9262WriteGrayscale>:

extern alt_u32 my9262_addr;


void my9262WriteGrayscale(alt_u16 grayscale)
{
    8f78:	defffe04 	addi	sp,sp,-8
    8f7c:	df000115 	stw	fp,4(sp)
    8f80:	df000104 	addi	fp,sp,4
    8f84:	2005883a 	mov	r2,r4
    8f88:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_MY9262_CONTROL(my9262_addr,1);
    8f8c:	00800074 	movhi	r2,1
    8f90:	10a81204 	addi	r2,r2,-24504
    8f94:	10800017 	ldw	r2,0(r2)
    8f98:	00c00044 	movi	r3,1
    8f9c:	10c00035 	stwio	r3,0(r2)
	IOWR_MY9262_DATA(my9262_addr, grayscale);
    8fa0:	00800074 	movhi	r2,1
    8fa4:	10a81204 	addi	r2,r2,-24504
    8fa8:	10800017 	ldw	r2,0(r2)
    8fac:	10800104 	addi	r2,r2,4
    8fb0:	e0ffff0b 	ldhu	r3,-4(fp)
    8fb4:	10c00035 	stwio	r3,0(r2)
}
    8fb8:	e037883a 	mov	sp,fp
    8fbc:	df000017 	ldw	fp,0(sp)
    8fc0:	dec00104 	addi	sp,sp,4
    8fc4:	f800283a 	ret

00008fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8fc8:	defffe04 	addi	sp,sp,-8
    8fcc:	dfc00115 	stw	ra,4(sp)
    8fd0:	df000015 	stw	fp,0(sp)
    8fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8fd8:	00800074 	movhi	r2,1
    8fdc:	10a81804 	addi	r2,r2,-24480
    8fe0:	10800017 	ldw	r2,0(r2)
    8fe4:	10000526 	beq	r2,zero,8ffc <alt_get_errno+0x34>
    8fe8:	00800074 	movhi	r2,1
    8fec:	10a81804 	addi	r2,r2,-24480
    8ff0:	10800017 	ldw	r2,0(r2)
    8ff4:	103ee83a 	callr	r2
    8ff8:	00000206 	br	9004 <alt_get_errno+0x3c>
    8ffc:	00800074 	movhi	r2,1
    9000:	10a81904 	addi	r2,r2,-24476
}
    9004:	e037883a 	mov	sp,fp
    9008:	dfc00117 	ldw	ra,4(sp)
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00204 	addi	sp,sp,8
    9014:	f800283a 	ret

00009018 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9018:	defffb04 	addi	sp,sp,-20
    901c:	dfc00415 	stw	ra,16(sp)
    9020:	df000315 	stw	fp,12(sp)
    9024:	df000304 	addi	fp,sp,12
    9028:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    902c:	e0bfff17 	ldw	r2,-4(fp)
    9030:	10000616 	blt	r2,zero,904c <close+0x34>
    9034:	e0bfff17 	ldw	r2,-4(fp)
    9038:	10c00324 	muli	r3,r2,12
    903c:	00800074 	movhi	r2,1
    9040:	10a7af04 	addi	r2,r2,-24900
    9044:	1885883a 	add	r2,r3,r2
    9048:	00000106 	br	9050 <close+0x38>
    904c:	0005883a 	mov	r2,zero
    9050:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9054:	e0bffd17 	ldw	r2,-12(fp)
    9058:	10001826 	beq	r2,zero,90bc <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    905c:	e0bffd17 	ldw	r2,-12(fp)
    9060:	10800017 	ldw	r2,0(r2)
    9064:	10800417 	ldw	r2,16(r2)
    9068:	10000626 	beq	r2,zero,9084 <close+0x6c>
    906c:	e0bffd17 	ldw	r2,-12(fp)
    9070:	10800017 	ldw	r2,0(r2)
    9074:	10800417 	ldw	r2,16(r2)
    9078:	e13ffd17 	ldw	r4,-12(fp)
    907c:	103ee83a 	callr	r2
    9080:	00000106 	br	9088 <close+0x70>
    9084:	0005883a 	mov	r2,zero
    9088:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    908c:	e13fff17 	ldw	r4,-4(fp)
    9090:	000965c0 	call	965c <alt_release_fd>
    if (rval < 0)
    9094:	e0bffe17 	ldw	r2,-8(fp)
    9098:	1000060e 	bge	r2,zero,90b4 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    909c:	0008fc80 	call	8fc8 <alt_get_errno>
    90a0:	e0fffe17 	ldw	r3,-8(fp)
    90a4:	00c7c83a 	sub	r3,zero,r3
    90a8:	10c00015 	stw	r3,0(r2)
      return -1;
    90ac:	00bfffc4 	movi	r2,-1
    90b0:	00000606 	br	90cc <close+0xb4>
    }
    return 0;
    90b4:	0005883a 	mov	r2,zero
    90b8:	00000406 	br	90cc <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    90bc:	0008fc80 	call	8fc8 <alt_get_errno>
    90c0:	00c01444 	movi	r3,81
    90c4:	10c00015 	stw	r3,0(r2)
    return -1;
    90c8:	00bfffc4 	movi	r2,-1
  }
}
    90cc:	e037883a 	mov	sp,fp
    90d0:	dfc00117 	ldw	ra,4(sp)
    90d4:	df000017 	ldw	fp,0(sp)
    90d8:	dec00204 	addi	sp,sp,8
    90dc:	f800283a 	ret

000090e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    90e0:	defffc04 	addi	sp,sp,-16
    90e4:	df000315 	stw	fp,12(sp)
    90e8:	df000304 	addi	fp,sp,12
    90ec:	e13ffd15 	stw	r4,-12(fp)
    90f0:	e17ffe15 	stw	r5,-8(fp)
    90f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    90f8:	e0bfff17 	ldw	r2,-4(fp)
}
    90fc:	e037883a 	mov	sp,fp
    9100:	df000017 	ldw	fp,0(sp)
    9104:	dec00104 	addi	sp,sp,4
    9108:	f800283a 	ret

0000910c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    910c:	defffe04 	addi	sp,sp,-8
    9110:	dfc00115 	stw	ra,4(sp)
    9114:	df000015 	stw	fp,0(sp)
    9118:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    911c:	00800074 	movhi	r2,1
    9120:	10a81804 	addi	r2,r2,-24480
    9124:	10800017 	ldw	r2,0(r2)
    9128:	10000526 	beq	r2,zero,9140 <alt_get_errno+0x34>
    912c:	00800074 	movhi	r2,1
    9130:	10a81804 	addi	r2,r2,-24480
    9134:	10800017 	ldw	r2,0(r2)
    9138:	103ee83a 	callr	r2
    913c:	00000206 	br	9148 <alt_get_errno+0x3c>
    9140:	00800074 	movhi	r2,1
    9144:	10a81904 	addi	r2,r2,-24476
}
    9148:	e037883a 	mov	sp,fp
    914c:	dfc00117 	ldw	ra,4(sp)
    9150:	df000017 	ldw	fp,0(sp)
    9154:	dec00204 	addi	sp,sp,8
    9158:	f800283a 	ret

0000915c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    915c:	defffa04 	addi	sp,sp,-24
    9160:	dfc00515 	stw	ra,20(sp)
    9164:	df000415 	stw	fp,16(sp)
    9168:	df000404 	addi	fp,sp,16
    916c:	e13ffe15 	stw	r4,-8(fp)
    9170:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9174:	e0bffe17 	ldw	r2,-8(fp)
    9178:	10000326 	beq	r2,zero,9188 <alt_dev_llist_insert+0x2c>
    917c:	e0bffe17 	ldw	r2,-8(fp)
    9180:	10800217 	ldw	r2,8(r2)
    9184:	1000051e 	bne	r2,zero,919c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    9188:	000910c0 	call	910c <alt_get_errno>
    918c:	00c00584 	movi	r3,22
    9190:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9194:	00bffa84 	movi	r2,-22
    9198:	00001306 	br	91e8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    919c:	e0bffe17 	ldw	r2,-8(fp)
    91a0:	e0ffff17 	ldw	r3,-4(fp)
    91a4:	e0fffc15 	stw	r3,-16(fp)
    91a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    91ac:	e0bffd17 	ldw	r2,-12(fp)
    91b0:	e0fffc17 	ldw	r3,-16(fp)
    91b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    91b8:	e0bffc17 	ldw	r2,-16(fp)
    91bc:	10c00017 	ldw	r3,0(r2)
    91c0:	e0bffd17 	ldw	r2,-12(fp)
    91c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    91c8:	e0bffc17 	ldw	r2,-16(fp)
    91cc:	10800017 	ldw	r2,0(r2)
    91d0:	e0fffd17 	ldw	r3,-12(fp)
    91d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    91d8:	e0bffc17 	ldw	r2,-16(fp)
    91dc:	e0fffd17 	ldw	r3,-12(fp)
    91e0:	10c00015 	stw	r3,0(r2)

  return 0;  
    91e4:	0005883a 	mov	r2,zero
}
    91e8:	e037883a 	mov	sp,fp
    91ec:	dfc00117 	ldw	ra,4(sp)
    91f0:	df000017 	ldw	fp,0(sp)
    91f4:	dec00204 	addi	sp,sp,8
    91f8:	f800283a 	ret

000091fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    91fc:	defffd04 	addi	sp,sp,-12
    9200:	dfc00215 	stw	ra,8(sp)
    9204:	df000115 	stw	fp,4(sp)
    9208:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    920c:	00800074 	movhi	r2,1
    9210:	10a75204 	addi	r2,r2,-25272
    9214:	e0bfff15 	stw	r2,-4(fp)
    9218:	00000606 	br	9234 <_do_ctors+0x38>
        (*ctor) (); 
    921c:	e0bfff17 	ldw	r2,-4(fp)
    9220:	10800017 	ldw	r2,0(r2)
    9224:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9228:	e0bfff17 	ldw	r2,-4(fp)
    922c:	10bfff04 	addi	r2,r2,-4
    9230:	e0bfff15 	stw	r2,-4(fp)
    9234:	e0ffff17 	ldw	r3,-4(fp)
    9238:	00800074 	movhi	r2,1
    923c:	10a75304 	addi	r2,r2,-25268
    9240:	18bff62e 	bgeu	r3,r2,921c <_do_ctors+0x20>
        (*ctor) (); 
}
    9244:	e037883a 	mov	sp,fp
    9248:	dfc00117 	ldw	ra,4(sp)
    924c:	df000017 	ldw	fp,0(sp)
    9250:	dec00204 	addi	sp,sp,8
    9254:	f800283a 	ret

00009258 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9258:	defffd04 	addi	sp,sp,-12
    925c:	dfc00215 	stw	ra,8(sp)
    9260:	df000115 	stw	fp,4(sp)
    9264:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9268:	00800074 	movhi	r2,1
    926c:	10a75204 	addi	r2,r2,-25272
    9270:	e0bfff15 	stw	r2,-4(fp)
    9274:	00000606 	br	9290 <_do_dtors+0x38>
        (*dtor) (); 
    9278:	e0bfff17 	ldw	r2,-4(fp)
    927c:	10800017 	ldw	r2,0(r2)
    9280:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9284:	e0bfff17 	ldw	r2,-4(fp)
    9288:	10bfff04 	addi	r2,r2,-4
    928c:	e0bfff15 	stw	r2,-4(fp)
    9290:	e0ffff17 	ldw	r3,-4(fp)
    9294:	00800074 	movhi	r2,1
    9298:	10a75304 	addi	r2,r2,-25268
    929c:	18bff62e 	bgeu	r3,r2,9278 <_do_dtors+0x20>
        (*dtor) (); 
}
    92a0:	e037883a 	mov	sp,fp
    92a4:	dfc00117 	ldw	ra,4(sp)
    92a8:	df000017 	ldw	fp,0(sp)
    92ac:	dec00204 	addi	sp,sp,8
    92b0:	f800283a 	ret

000092b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    92b4:	defff904 	addi	sp,sp,-28
    92b8:	dfc00615 	stw	ra,24(sp)
    92bc:	df000515 	stw	fp,20(sp)
    92c0:	df000504 	addi	fp,sp,20
    92c4:	e13ffc15 	stw	r4,-16(fp)
    92c8:	e17ffd15 	stw	r5,-12(fp)
    92cc:	e1bffe15 	stw	r6,-8(fp)
    92d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    92d4:	e13ffd17 	ldw	r4,-12(fp)
    92d8:	e17ffe17 	ldw	r5,-8(fp)
    92dc:	e1bfff17 	ldw	r6,-4(fp)
    92e0:	00095080 	call	9508 <open>
    92e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    92e8:	e0bffb17 	ldw	r2,-20(fp)
    92ec:	10001c16 	blt	r2,zero,9360 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    92f0:	00c00074 	movhi	r3,1
    92f4:	18e7af04 	addi	r3,r3,-24900
    92f8:	e0bffb17 	ldw	r2,-20(fp)
    92fc:	10800324 	muli	r2,r2,12
    9300:	1885883a 	add	r2,r3,r2
    9304:	10c00017 	ldw	r3,0(r2)
    9308:	e0bffc17 	ldw	r2,-16(fp)
    930c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9310:	00c00074 	movhi	r3,1
    9314:	18e7af04 	addi	r3,r3,-24900
    9318:	e0bffb17 	ldw	r2,-20(fp)
    931c:	10800324 	muli	r2,r2,12
    9320:	1885883a 	add	r2,r3,r2
    9324:	10800104 	addi	r2,r2,4
    9328:	10c00017 	ldw	r3,0(r2)
    932c:	e0bffc17 	ldw	r2,-16(fp)
    9330:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9334:	00c00074 	movhi	r3,1
    9338:	18e7af04 	addi	r3,r3,-24900
    933c:	e0bffb17 	ldw	r2,-20(fp)
    9340:	10800324 	muli	r2,r2,12
    9344:	1885883a 	add	r2,r3,r2
    9348:	10800204 	addi	r2,r2,8
    934c:	10c00017 	ldw	r3,0(r2)
    9350:	e0bffc17 	ldw	r2,-16(fp)
    9354:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9358:	e13ffb17 	ldw	r4,-20(fp)
    935c:	000965c0 	call	965c <alt_release_fd>
  }
} 
    9360:	e037883a 	mov	sp,fp
    9364:	dfc00117 	ldw	ra,4(sp)
    9368:	df000017 	ldw	fp,0(sp)
    936c:	dec00204 	addi	sp,sp,8
    9370:	f800283a 	ret

00009374 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9374:	defffb04 	addi	sp,sp,-20
    9378:	dfc00415 	stw	ra,16(sp)
    937c:	df000315 	stw	fp,12(sp)
    9380:	df000304 	addi	fp,sp,12
    9384:	e13ffd15 	stw	r4,-12(fp)
    9388:	e17ffe15 	stw	r5,-8(fp)
    938c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9390:	01000074 	movhi	r4,1
    9394:	2127b204 	addi	r4,r4,-24888
    9398:	e17ffd17 	ldw	r5,-12(fp)
    939c:	01800044 	movi	r6,1
    93a0:	01c07fc4 	movi	r7,511
    93a4:	00092b40 	call	92b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    93a8:	01000074 	movhi	r4,1
    93ac:	2127af04 	addi	r4,r4,-24900
    93b0:	e17ffe17 	ldw	r5,-8(fp)
    93b4:	000d883a 	mov	r6,zero
    93b8:	01c07fc4 	movi	r7,511
    93bc:	00092b40 	call	92b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    93c0:	01000074 	movhi	r4,1
    93c4:	2127b504 	addi	r4,r4,-24876
    93c8:	e17fff17 	ldw	r5,-4(fp)
    93cc:	01800044 	movi	r6,1
    93d0:	01c07fc4 	movi	r7,511
    93d4:	00092b40 	call	92b4 <alt_open_fd>
}  
    93d8:	e037883a 	mov	sp,fp
    93dc:	dfc00117 	ldw	ra,4(sp)
    93e0:	df000017 	ldw	fp,0(sp)
    93e4:	dec00204 	addi	sp,sp,8
    93e8:	f800283a 	ret

000093ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    93ec:	defffe04 	addi	sp,sp,-8
    93f0:	dfc00115 	stw	ra,4(sp)
    93f4:	df000015 	stw	fp,0(sp)
    93f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    93fc:	00800074 	movhi	r2,1
    9400:	10a81804 	addi	r2,r2,-24480
    9404:	10800017 	ldw	r2,0(r2)
    9408:	10000526 	beq	r2,zero,9420 <alt_get_errno+0x34>
    940c:	00800074 	movhi	r2,1
    9410:	10a81804 	addi	r2,r2,-24480
    9414:	10800017 	ldw	r2,0(r2)
    9418:	103ee83a 	callr	r2
    941c:	00000206 	br	9428 <alt_get_errno+0x3c>
    9420:	00800074 	movhi	r2,1
    9424:	10a81904 	addi	r2,r2,-24476
}
    9428:	e037883a 	mov	sp,fp
    942c:	dfc00117 	ldw	ra,4(sp)
    9430:	df000017 	ldw	fp,0(sp)
    9434:	dec00204 	addi	sp,sp,8
    9438:	f800283a 	ret

0000943c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    943c:	defffd04 	addi	sp,sp,-12
    9440:	df000215 	stw	fp,8(sp)
    9444:	df000204 	addi	fp,sp,8
    9448:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    944c:	e0bfff17 	ldw	r2,-4(fp)
    9450:	10800217 	ldw	r2,8(r2)
    9454:	10d00034 	orhi	r3,r2,16384
    9458:	e0bfff17 	ldw	r2,-4(fp)
    945c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9460:	e03ffe15 	stw	zero,-8(fp)
    9464:	00001d06 	br	94dc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9468:	00c00074 	movhi	r3,1
    946c:	18e7af04 	addi	r3,r3,-24900
    9470:	e0bffe17 	ldw	r2,-8(fp)
    9474:	10800324 	muli	r2,r2,12
    9478:	1885883a 	add	r2,r3,r2
    947c:	10c00017 	ldw	r3,0(r2)
    9480:	e0bfff17 	ldw	r2,-4(fp)
    9484:	10800017 	ldw	r2,0(r2)
    9488:	1880111e 	bne	r3,r2,94d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    948c:	00c00074 	movhi	r3,1
    9490:	18e7af04 	addi	r3,r3,-24900
    9494:	e0bffe17 	ldw	r2,-8(fp)
    9498:	10800324 	muli	r2,r2,12
    949c:	1885883a 	add	r2,r3,r2
    94a0:	10800204 	addi	r2,r2,8
    94a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    94a8:	1000090e 	bge	r2,zero,94d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    94ac:	e0bffe17 	ldw	r2,-8(fp)
    94b0:	10c00324 	muli	r3,r2,12
    94b4:	00800074 	movhi	r2,1
    94b8:	10a7af04 	addi	r2,r2,-24900
    94bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    94c0:	e0bfff17 	ldw	r2,-4(fp)
    94c4:	18800226 	beq	r3,r2,94d0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    94c8:	00bffcc4 	movi	r2,-13
    94cc:	00000a06 	br	94f8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    94d0:	e0bffe17 	ldw	r2,-8(fp)
    94d4:	10800044 	addi	r2,r2,1
    94d8:	e0bffe15 	stw	r2,-8(fp)
    94dc:	00800074 	movhi	r2,1
    94e0:	10a81704 	addi	r2,r2,-24484
    94e4:	10800017 	ldw	r2,0(r2)
    94e8:	1007883a 	mov	r3,r2
    94ec:	e0bffe17 	ldw	r2,-8(fp)
    94f0:	18bfdd2e 	bgeu	r3,r2,9468 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    94f4:	0005883a 	mov	r2,zero
}
    94f8:	e037883a 	mov	sp,fp
    94fc:	df000017 	ldw	fp,0(sp)
    9500:	dec00104 	addi	sp,sp,4
    9504:	f800283a 	ret

00009508 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9508:	defff604 	addi	sp,sp,-40
    950c:	dfc00915 	stw	ra,36(sp)
    9510:	df000815 	stw	fp,32(sp)
    9514:	df000804 	addi	fp,sp,32
    9518:	e13ffd15 	stw	r4,-12(fp)
    951c:	e17ffe15 	stw	r5,-8(fp)
    9520:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9524:	00bfffc4 	movi	r2,-1
    9528:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    952c:	00bffb44 	movi	r2,-19
    9530:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9534:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9538:	e13ffd17 	ldw	r4,-12(fp)
    953c:	01400074 	movhi	r5,1
    9540:	29681504 	addi	r5,r5,-24492
    9544:	00096dc0 	call	96dc <alt_find_dev>
    9548:	e0bff815 	stw	r2,-32(fp)
    954c:	e0bff817 	ldw	r2,-32(fp)
    9550:	1000051e 	bne	r2,zero,9568 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9554:	e13ffd17 	ldw	r4,-12(fp)
    9558:	000976c0 	call	976c <alt_find_file>
    955c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9560:	00800044 	movi	r2,1
    9564:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9568:	e0bff817 	ldw	r2,-32(fp)
    956c:	10002926 	beq	r2,zero,9614 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9570:	e13ff817 	ldw	r4,-32(fp)
    9574:	00098800 	call	9880 <alt_get_fd>
    9578:	e0bff915 	stw	r2,-28(fp)
    957c:	e0bff917 	ldw	r2,-28(fp)
    9580:	1000030e 	bge	r2,zero,9590 <open+0x88>
    {
      status = index;
    9584:	e0bff917 	ldw	r2,-28(fp)
    9588:	e0bffa15 	stw	r2,-24(fp)
    958c:	00002306 	br	961c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    9590:	e0bff917 	ldw	r2,-28(fp)
    9594:	10c00324 	muli	r3,r2,12
    9598:	00800074 	movhi	r2,1
    959c:	10a7af04 	addi	r2,r2,-24900
    95a0:	1885883a 	add	r2,r3,r2
    95a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    95a8:	e0fffe17 	ldw	r3,-8(fp)
    95ac:	00900034 	movhi	r2,16384
    95b0:	10bfffc4 	addi	r2,r2,-1
    95b4:	1886703a 	and	r3,r3,r2
    95b8:	e0bffc17 	ldw	r2,-16(fp)
    95bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    95c0:	e0bffb17 	ldw	r2,-20(fp)
    95c4:	1000051e 	bne	r2,zero,95dc <open+0xd4>
    95c8:	e13ffc17 	ldw	r4,-16(fp)
    95cc:	000943c0 	call	943c <alt_file_locked>
    95d0:	e0bffa15 	stw	r2,-24(fp)
    95d4:	e0bffa17 	ldw	r2,-24(fp)
    95d8:	10001016 	blt	r2,zero,961c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    95dc:	e0bff817 	ldw	r2,-32(fp)
    95e0:	10800317 	ldw	r2,12(r2)
    95e4:	10000826 	beq	r2,zero,9608 <open+0x100>
    95e8:	e0bff817 	ldw	r2,-32(fp)
    95ec:	10800317 	ldw	r2,12(r2)
    95f0:	e13ffc17 	ldw	r4,-16(fp)
    95f4:	e17ffd17 	ldw	r5,-12(fp)
    95f8:	e1bffe17 	ldw	r6,-8(fp)
    95fc:	e1ffff17 	ldw	r7,-4(fp)
    9600:	103ee83a 	callr	r2
    9604:	00000106 	br	960c <open+0x104>
    9608:	0005883a 	mov	r2,zero
    960c:	e0bffa15 	stw	r2,-24(fp)
    9610:	00000206 	br	961c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9614:	00bffb44 	movi	r2,-19
    9618:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    961c:	e0bffa17 	ldw	r2,-24(fp)
    9620:	1000080e 	bge	r2,zero,9644 <open+0x13c>
  {
    alt_release_fd (index);  
    9624:	e13ff917 	ldw	r4,-28(fp)
    9628:	000965c0 	call	965c <alt_release_fd>
    ALT_ERRNO = -status;
    962c:	00093ec0 	call	93ec <alt_get_errno>
    9630:	e0fffa17 	ldw	r3,-24(fp)
    9634:	00c7c83a 	sub	r3,zero,r3
    9638:	10c00015 	stw	r3,0(r2)
    return -1;
    963c:	00bfffc4 	movi	r2,-1
    9640:	00000106 	br	9648 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    9644:	e0bff917 	ldw	r2,-28(fp)
}
    9648:	e037883a 	mov	sp,fp
    964c:	dfc00117 	ldw	ra,4(sp)
    9650:	df000017 	ldw	fp,0(sp)
    9654:	dec00204 	addi	sp,sp,8
    9658:	f800283a 	ret

0000965c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    965c:	defffe04 	addi	sp,sp,-8
    9660:	df000115 	stw	fp,4(sp)
    9664:	df000104 	addi	fp,sp,4
    9668:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    966c:	e0bfff17 	ldw	r2,-4(fp)
    9670:	108000d0 	cmplti	r2,r2,3
    9674:	10000d1e 	bne	r2,zero,96ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    9678:	00c00074 	movhi	r3,1
    967c:	18e7af04 	addi	r3,r3,-24900
    9680:	e0bfff17 	ldw	r2,-4(fp)
    9684:	10800324 	muli	r2,r2,12
    9688:	1885883a 	add	r2,r3,r2
    968c:	10800204 	addi	r2,r2,8
    9690:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9694:	00c00074 	movhi	r3,1
    9698:	18e7af04 	addi	r3,r3,-24900
    969c:	e0bfff17 	ldw	r2,-4(fp)
    96a0:	10800324 	muli	r2,r2,12
    96a4:	1885883a 	add	r2,r3,r2
    96a8:	10000015 	stw	zero,0(r2)
  }
}
    96ac:	e037883a 	mov	sp,fp
    96b0:	df000017 	ldw	fp,0(sp)
    96b4:	dec00104 	addi	sp,sp,4
    96b8:	f800283a 	ret

000096bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    96bc:	deffff04 	addi	sp,sp,-4
    96c0:	df000015 	stw	fp,0(sp)
    96c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    96c8:	000170fa 	wrctl	ienable,zero
}
    96cc:	e037883a 	mov	sp,fp
    96d0:	df000017 	ldw	fp,0(sp)
    96d4:	dec00104 	addi	sp,sp,4
    96d8:	f800283a 	ret

000096dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    96dc:	defffa04 	addi	sp,sp,-24
    96e0:	dfc00515 	stw	ra,20(sp)
    96e4:	df000415 	stw	fp,16(sp)
    96e8:	df000404 	addi	fp,sp,16
    96ec:	e13ffe15 	stw	r4,-8(fp)
    96f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    96f4:	e0bfff17 	ldw	r2,-4(fp)
    96f8:	10800017 	ldw	r2,0(r2)
    96fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9700:	e13ffe17 	ldw	r4,-8(fp)
    9704:	00089080 	call	8908 <strlen>
    9708:	10800044 	addi	r2,r2,1
    970c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9710:	00000d06 	br	9748 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9714:	e0bffc17 	ldw	r2,-16(fp)
    9718:	10c00217 	ldw	r3,8(r2)
    971c:	e0bffd17 	ldw	r2,-12(fp)
    9720:	1809883a 	mov	r4,r3
    9724:	e17ffe17 	ldw	r5,-8(fp)
    9728:	100d883a 	mov	r6,r2
    972c:	00099680 	call	9968 <memcmp>
    9730:	1000021e 	bne	r2,zero,973c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9734:	e0bffc17 	ldw	r2,-16(fp)
    9738:	00000706 	br	9758 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    973c:	e0bffc17 	ldw	r2,-16(fp)
    9740:	10800017 	ldw	r2,0(r2)
    9744:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9748:	e0fffc17 	ldw	r3,-16(fp)
    974c:	e0bfff17 	ldw	r2,-4(fp)
    9750:	18bff01e 	bne	r3,r2,9714 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9754:	0005883a 	mov	r2,zero
}
    9758:	e037883a 	mov	sp,fp
    975c:	dfc00117 	ldw	ra,4(sp)
    9760:	df000017 	ldw	fp,0(sp)
    9764:	dec00204 	addi	sp,sp,8
    9768:	f800283a 	ret

0000976c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    976c:	defffb04 	addi	sp,sp,-20
    9770:	dfc00415 	stw	ra,16(sp)
    9774:	df000315 	stw	fp,12(sp)
    9778:	df000304 	addi	fp,sp,12
    977c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9780:	00800074 	movhi	r2,1
    9784:	10a81304 	addi	r2,r2,-24500
    9788:	10800017 	ldw	r2,0(r2)
    978c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9790:	00003106 	br	9858 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9794:	e0bffd17 	ldw	r2,-12(fp)
    9798:	10800217 	ldw	r2,8(r2)
    979c:	1009883a 	mov	r4,r2
    97a0:	00089080 	call	8908 <strlen>
    97a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    97a8:	e0bffd17 	ldw	r2,-12(fp)
    97ac:	10c00217 	ldw	r3,8(r2)
    97b0:	e0bffe17 	ldw	r2,-8(fp)
    97b4:	10bfffc4 	addi	r2,r2,-1
    97b8:	1885883a 	add	r2,r3,r2
    97bc:	10800003 	ldbu	r2,0(r2)
    97c0:	10803fcc 	andi	r2,r2,255
    97c4:	1080201c 	xori	r2,r2,128
    97c8:	10bfe004 	addi	r2,r2,-128
    97cc:	10800bd8 	cmpnei	r2,r2,47
    97d0:	1000031e 	bne	r2,zero,97e0 <alt_find_file+0x74>
    {
      len -= 1;
    97d4:	e0bffe17 	ldw	r2,-8(fp)
    97d8:	10bfffc4 	addi	r2,r2,-1
    97dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    97e0:	e0bffe17 	ldw	r2,-8(fp)
    97e4:	e0ffff17 	ldw	r3,-4(fp)
    97e8:	1885883a 	add	r2,r3,r2
    97ec:	10800003 	ldbu	r2,0(r2)
    97f0:	10803fcc 	andi	r2,r2,255
    97f4:	1080201c 	xori	r2,r2,128
    97f8:	10bfe004 	addi	r2,r2,-128
    97fc:	10800be0 	cmpeqi	r2,r2,47
    9800:	1000081e 	bne	r2,zero,9824 <alt_find_file+0xb8>
    9804:	e0bffe17 	ldw	r2,-8(fp)
    9808:	e0ffff17 	ldw	r3,-4(fp)
    980c:	1885883a 	add	r2,r3,r2
    9810:	10800003 	ldbu	r2,0(r2)
    9814:	10803fcc 	andi	r2,r2,255
    9818:	1080201c 	xori	r2,r2,128
    981c:	10bfe004 	addi	r2,r2,-128
    9820:	10000a1e 	bne	r2,zero,984c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9824:	e0bffd17 	ldw	r2,-12(fp)
    9828:	10c00217 	ldw	r3,8(r2)
    982c:	e0bffe17 	ldw	r2,-8(fp)
    9830:	1809883a 	mov	r4,r3
    9834:	e17fff17 	ldw	r5,-4(fp)
    9838:	100d883a 	mov	r6,r2
    983c:	00099680 	call	9968 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9840:	1000021e 	bne	r2,zero,984c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9844:	e0bffd17 	ldw	r2,-12(fp)
    9848:	00000806 	br	986c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    984c:	e0bffd17 	ldw	r2,-12(fp)
    9850:	10800017 	ldw	r2,0(r2)
    9854:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9858:	e0fffd17 	ldw	r3,-12(fp)
    985c:	00800074 	movhi	r2,1
    9860:	10a81304 	addi	r2,r2,-24500
    9864:	18bfcb1e 	bne	r3,r2,9794 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9868:	0005883a 	mov	r2,zero
}
    986c:	e037883a 	mov	sp,fp
    9870:	dfc00117 	ldw	ra,4(sp)
    9874:	df000017 	ldw	fp,0(sp)
    9878:	dec00204 	addi	sp,sp,8
    987c:	f800283a 	ret

00009880 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9880:	defffc04 	addi	sp,sp,-16
    9884:	df000315 	stw	fp,12(sp)
    9888:	df000304 	addi	fp,sp,12
    988c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9890:	00bffa04 	movi	r2,-24
    9894:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9898:	e03ffd15 	stw	zero,-12(fp)
    989c:	00001d06 	br	9914 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    98a0:	00c00074 	movhi	r3,1
    98a4:	18e7af04 	addi	r3,r3,-24900
    98a8:	e0bffd17 	ldw	r2,-12(fp)
    98ac:	10800324 	muli	r2,r2,12
    98b0:	1885883a 	add	r2,r3,r2
    98b4:	10800017 	ldw	r2,0(r2)
    98b8:	1000131e 	bne	r2,zero,9908 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    98bc:	00c00074 	movhi	r3,1
    98c0:	18e7af04 	addi	r3,r3,-24900
    98c4:	e0bffd17 	ldw	r2,-12(fp)
    98c8:	10800324 	muli	r2,r2,12
    98cc:	1885883a 	add	r2,r3,r2
    98d0:	e0ffff17 	ldw	r3,-4(fp)
    98d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    98d8:	00800074 	movhi	r2,1
    98dc:	10a81704 	addi	r2,r2,-24484
    98e0:	10c00017 	ldw	r3,0(r2)
    98e4:	e0bffd17 	ldw	r2,-12(fp)
    98e8:	1880040e 	bge	r3,r2,98fc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    98ec:	00800074 	movhi	r2,1
    98f0:	10a81704 	addi	r2,r2,-24484
    98f4:	e0fffd17 	ldw	r3,-12(fp)
    98f8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    98fc:	e0bffd17 	ldw	r2,-12(fp)
    9900:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9904:	00000606 	br	9920 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9908:	e0bffd17 	ldw	r2,-12(fp)
    990c:	10800044 	addi	r2,r2,1
    9910:	e0bffd15 	stw	r2,-12(fp)
    9914:	e0bffd17 	ldw	r2,-12(fp)
    9918:	10800810 	cmplti	r2,r2,32
    991c:	103fe01e 	bne	r2,zero,98a0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9920:	e0bffe17 	ldw	r2,-8(fp)
}
    9924:	e037883a 	mov	sp,fp
    9928:	df000017 	ldw	fp,0(sp)
    992c:	dec00104 	addi	sp,sp,4
    9930:	f800283a 	ret

00009934 <atexit>:
    9934:	200b883a 	mov	r5,r4
    9938:	000d883a 	mov	r6,zero
    993c:	0009883a 	mov	r4,zero
    9940:	000f883a 	mov	r7,zero
    9944:	00099b01 	jmpi	99b0 <__register_exitproc>

00009948 <exit>:
    9948:	defffe04 	addi	sp,sp,-8
    994c:	000b883a 	mov	r5,zero
    9950:	dc000015 	stw	r16,0(sp)
    9954:	dfc00115 	stw	ra,4(sp)
    9958:	2021883a 	mov	r16,r4
    995c:	0009b380 	call	9b38 <__call_exitprocs>
    9960:	8009883a 	mov	r4,r16
    9964:	0009d100 	call	9d10 <_exit>

00009968 <memcmp>:
    9968:	30000d26 	beq	r6,zero,99a0 <memcmp+0x38>
    996c:	20c00003 	ldbu	r3,0(r4)
    9970:	28800003 	ldbu	r2,0(r5)
    9974:	18800c1e 	bne	r3,r2,99a8 <memcmp+0x40>
    9978:	31bfff84 	addi	r6,r6,-2
    997c:	01ffffc4 	movi	r7,-1
    9980:	00000406 	br	9994 <memcmp+0x2c>
    9984:	20c00003 	ldbu	r3,0(r4)
    9988:	28800003 	ldbu	r2,0(r5)
    998c:	31bfffc4 	addi	r6,r6,-1
    9990:	1880051e 	bne	r3,r2,99a8 <memcmp+0x40>
    9994:	21000044 	addi	r4,r4,1
    9998:	29400044 	addi	r5,r5,1
    999c:	31fff91e 	bne	r6,r7,9984 <memcmp+0x1c>
    99a0:	0005883a 	mov	r2,zero
    99a4:	f800283a 	ret
    99a8:	1885c83a 	sub	r2,r3,r2
    99ac:	f800283a 	ret

000099b0 <__register_exitproc>:
    99b0:	defff904 	addi	sp,sp,-28
    99b4:	00800074 	movhi	r2,1
    99b8:	10a80f04 	addi	r2,r2,-24516
    99bc:	dc400415 	stw	r17,16(sp)
    99c0:	14400017 	ldw	r17,0(r2)
    99c4:	dc000315 	stw	r16,12(sp)
    99c8:	dc800515 	stw	r18,20(sp)
    99cc:	8c000c17 	ldw	r16,48(r17)
    99d0:	dfc00615 	stw	ra,24(sp)
    99d4:	2025883a 	mov	r18,r4
    99d8:	80004226 	beq	r16,zero,9ae4 <__register_exitproc+0x134>
    99dc:	80800117 	ldw	r2,4(r16)
    99e0:	00c007c4 	movi	r3,31
    99e4:	1880180e 	bge	r3,r2,9a48 <__register_exitproc+0x98>
    99e8:	00800034 	movhi	r2,0
    99ec:	10800004 	addi	r2,r2,0
    99f0:	1000071e 	bne	r2,zero,9a10 <__register_exitproc+0x60>
    99f4:	00bfffc4 	movi	r2,-1
    99f8:	dfc00617 	ldw	ra,24(sp)
    99fc:	dc800517 	ldw	r18,20(sp)
    9a00:	dc400417 	ldw	r17,16(sp)
    9a04:	dc000317 	ldw	r16,12(sp)
    9a08:	dec00704 	addi	sp,sp,28
    9a0c:	f800283a 	ret
    9a10:	01002304 	movi	r4,140
    9a14:	d9400015 	stw	r5,0(sp)
    9a18:	d9800115 	stw	r6,4(sp)
    9a1c:	d9c00215 	stw	r7,8(sp)
    9a20:	00000000 	call	0 <__alt_mem_epcs_flash>
    9a24:	1021883a 	mov	r16,r2
    9a28:	d9400017 	ldw	r5,0(sp)
    9a2c:	d9800117 	ldw	r6,4(sp)
    9a30:	d9c00217 	ldw	r7,8(sp)
    9a34:	103fef26 	beq	r2,zero,99f4 <__register_exitproc+0x44>
    9a38:	88800c17 	ldw	r2,48(r17)
    9a3c:	80000115 	stw	zero,4(r16)
    9a40:	80800015 	stw	r2,0(r16)
    9a44:	8c000c15 	stw	r16,48(r17)
    9a48:	90001726 	beq	r18,zero,9aa8 <__register_exitproc+0xf8>
    9a4c:	80802217 	ldw	r2,136(r16)
    9a50:	10002826 	beq	r2,zero,9af4 <__register_exitproc+0x144>
    9a54:	12804017 	ldw	r10,256(r2)
    9a58:	80c00117 	ldw	r3,4(r16)
    9a5c:	02400044 	movi	r9,1
    9a60:	48d2983a 	sll	r9,r9,r3
    9a64:	19000804 	addi	r4,r3,32
    9a68:	18d1883a 	add	r8,r3,r3
    9a6c:	2109883a 	add	r4,r4,r4
    9a70:	4211883a 	add	r8,r8,r8
    9a74:	2109883a 	add	r4,r4,r4
    9a78:	1109883a 	add	r4,r2,r4
    9a7c:	1211883a 	add	r8,r2,r8
    9a80:	5254b03a 	or	r10,r10,r9
    9a84:	21c00015 	stw	r7,0(r4)
    9a88:	41800015 	stw	r6,0(r8)
    9a8c:	12804015 	stw	r10,256(r2)
    9a90:	01000084 	movi	r4,2
    9a94:	9100051e 	bne	r18,r4,9aac <__register_exitproc+0xfc>
    9a98:	11004117 	ldw	r4,260(r2)
    9a9c:	2252b03a 	or	r9,r4,r9
    9aa0:	12404115 	stw	r9,260(r2)
    9aa4:	00000106 	br	9aac <__register_exitproc+0xfc>
    9aa8:	80c00117 	ldw	r3,4(r16)
    9aac:	18800084 	addi	r2,r3,2
    9ab0:	1085883a 	add	r2,r2,r2
    9ab4:	1085883a 	add	r2,r2,r2
    9ab8:	8085883a 	add	r2,r16,r2
    9abc:	18c00044 	addi	r3,r3,1
    9ac0:	11400015 	stw	r5,0(r2)
    9ac4:	0005883a 	mov	r2,zero
    9ac8:	80c00115 	stw	r3,4(r16)
    9acc:	dfc00617 	ldw	ra,24(sp)
    9ad0:	dc800517 	ldw	r18,20(sp)
    9ad4:	dc400417 	ldw	r17,16(sp)
    9ad8:	dc000317 	ldw	r16,12(sp)
    9adc:	dec00704 	addi	sp,sp,28
    9ae0:	f800283a 	ret
    9ae4:	04000074 	movhi	r16,1
    9ae8:	84281d04 	addi	r16,r16,-24460
    9aec:	8c000c15 	stw	r16,48(r17)
    9af0:	003fba06 	br	99dc <__register_exitproc+0x2c>
    9af4:	00800034 	movhi	r2,0
    9af8:	10800004 	addi	r2,r2,0
    9afc:	103fbd26 	beq	r2,zero,99f4 <__register_exitproc+0x44>
    9b00:	d9400015 	stw	r5,0(sp)
    9b04:	d9800115 	stw	r6,4(sp)
    9b08:	d9c00215 	stw	r7,8(sp)
    9b0c:	01004204 	movi	r4,264
    9b10:	103ee83a 	callr	r2
    9b14:	d9400017 	ldw	r5,0(sp)
    9b18:	d9800117 	ldw	r6,4(sp)
    9b1c:	d9c00217 	ldw	r7,8(sp)
    9b20:	103fb426 	beq	r2,zero,99f4 <__register_exitproc+0x44>
    9b24:	10004015 	stw	zero,256(r2)
    9b28:	10004115 	stw	zero,260(r2)
    9b2c:	80802215 	stw	r2,136(r16)
    9b30:	0015883a 	mov	r10,zero
    9b34:	003fc806 	br	9a58 <__register_exitproc+0xa8>

00009b38 <__call_exitprocs>:
    9b38:	00800074 	movhi	r2,1
    9b3c:	10a80f04 	addi	r2,r2,-24516
    9b40:	10800017 	ldw	r2,0(r2)
    9b44:	defff204 	addi	sp,sp,-56
    9b48:	df000c15 	stw	fp,48(sp)
    9b4c:	d8800015 	stw	r2,0(sp)
    9b50:	10800c04 	addi	r2,r2,48
    9b54:	dd400915 	stw	r21,36(sp)
    9b58:	dfc00d15 	stw	ra,52(sp)
    9b5c:	ddc00b15 	stw	r23,44(sp)
    9b60:	dd800a15 	stw	r22,40(sp)
    9b64:	dd000815 	stw	r20,32(sp)
    9b68:	dcc00715 	stw	r19,28(sp)
    9b6c:	dc800615 	stw	r18,24(sp)
    9b70:	dc400515 	stw	r17,20(sp)
    9b74:	dc000415 	stw	r16,16(sp)
    9b78:	d9000115 	stw	r4,4(sp)
    9b7c:	2839883a 	mov	fp,r5
    9b80:	d8800215 	stw	r2,8(sp)
    9b84:	057fffc4 	movi	r21,-1
    9b88:	d8800017 	ldw	r2,0(sp)
    9b8c:	dd800217 	ldw	r22,8(sp)
    9b90:	15c00c17 	ldw	r23,48(r2)
    9b94:	b8001b26 	beq	r23,zero,9c04 <__call_exitprocs+0xcc>
    9b98:	b9000117 	ldw	r4,4(r23)
    9b9c:	bd002217 	ldw	r20,136(r23)
    9ba0:	243fffc4 	addi	r16,r4,-1
    9ba4:	80001416 	blt	r16,zero,9bf8 <__call_exitprocs+0xc0>
    9ba8:	244007c4 	addi	r17,r4,31
    9bac:	21000044 	addi	r4,r4,1
    9bb0:	8c63883a 	add	r17,r17,r17
    9bb4:	8427883a 	add	r19,r16,r16
    9bb8:	2109883a 	add	r4,r4,r4
    9bbc:	8c63883a 	add	r17,r17,r17
    9bc0:	9ce7883a 	add	r19,r19,r19
    9bc4:	2109883a 	add	r4,r4,r4
    9bc8:	a463883a 	add	r17,r20,r17
    9bcc:	a4e7883a 	add	r19,r20,r19
    9bd0:	b925883a 	add	r18,r23,r4
    9bd4:	e0001726 	beq	fp,zero,9c34 <__call_exitprocs+0xfc>
    9bd8:	a0000226 	beq	r20,zero,9be4 <__call_exitprocs+0xac>
    9bdc:	89400017 	ldw	r5,0(r17)
    9be0:	2f001426 	beq	r5,fp,9c34 <__call_exitprocs+0xfc>
    9be4:	843fffc4 	addi	r16,r16,-1
    9be8:	8c7fff04 	addi	r17,r17,-4
    9bec:	9cffff04 	addi	r19,r19,-4
    9bf0:	94bfff04 	addi	r18,r18,-4
    9bf4:	857ff71e 	bne	r16,r21,9bd4 <__call_exitprocs+0x9c>
    9bf8:	00800034 	movhi	r2,0
    9bfc:	10800004 	addi	r2,r2,0
    9c00:	1000311e 	bne	r2,zero,9cc8 <__call_exitprocs+0x190>
    9c04:	dfc00d17 	ldw	ra,52(sp)
    9c08:	df000c17 	ldw	fp,48(sp)
    9c0c:	ddc00b17 	ldw	r23,44(sp)
    9c10:	dd800a17 	ldw	r22,40(sp)
    9c14:	dd400917 	ldw	r21,36(sp)
    9c18:	dd000817 	ldw	r20,32(sp)
    9c1c:	dcc00717 	ldw	r19,28(sp)
    9c20:	dc800617 	ldw	r18,24(sp)
    9c24:	dc400517 	ldw	r17,20(sp)
    9c28:	dc000417 	ldw	r16,16(sp)
    9c2c:	dec00e04 	addi	sp,sp,56
    9c30:	f800283a 	ret
    9c34:	b9000117 	ldw	r4,4(r23)
    9c38:	92000017 	ldw	r8,0(r18)
    9c3c:	213fffc4 	addi	r4,r4,-1
    9c40:	24001a26 	beq	r4,r16,9cac <__call_exitprocs+0x174>
    9c44:	90000015 	stw	zero,0(r18)
    9c48:	403fe626 	beq	r8,zero,9be4 <__call_exitprocs+0xac>
    9c4c:	ba400117 	ldw	r9,4(r23)
    9c50:	a0001226 	beq	r20,zero,9c9c <__call_exitprocs+0x164>
    9c54:	00800044 	movi	r2,1
    9c58:	1408983a 	sll	r4,r2,r16
    9c5c:	a1404017 	ldw	r5,256(r20)
    9c60:	214a703a 	and	r5,r4,r5
    9c64:	28000d26 	beq	r5,zero,9c9c <__call_exitprocs+0x164>
    9c68:	a1404117 	ldw	r5,260(r20)
    9c6c:	2148703a 	and	r4,r4,r5
    9c70:	2000101e 	bne	r4,zero,9cb4 <__call_exitprocs+0x17c>
    9c74:	99400017 	ldw	r5,0(r19)
    9c78:	d9000117 	ldw	r4,4(sp)
    9c7c:	da400315 	stw	r9,12(sp)
    9c80:	403ee83a 	callr	r8
    9c84:	da400317 	ldw	r9,12(sp)
    9c88:	b9000117 	ldw	r4,4(r23)
    9c8c:	227fbe1e 	bne	r4,r9,9b88 <__call_exitprocs+0x50>
    9c90:	b1000017 	ldw	r4,0(r22)
    9c94:	25ffd326 	beq	r4,r23,9be4 <__call_exitprocs+0xac>
    9c98:	003fbb06 	br	9b88 <__call_exitprocs+0x50>
    9c9c:	da400315 	stw	r9,12(sp)
    9ca0:	403ee83a 	callr	r8
    9ca4:	da400317 	ldw	r9,12(sp)
    9ca8:	003ff706 	br	9c88 <__call_exitprocs+0x150>
    9cac:	bc000115 	stw	r16,4(r23)
    9cb0:	003fe506 	br	9c48 <__call_exitprocs+0x110>
    9cb4:	99000017 	ldw	r4,0(r19)
    9cb8:	da400315 	stw	r9,12(sp)
    9cbc:	403ee83a 	callr	r8
    9cc0:	da400317 	ldw	r9,12(sp)
    9cc4:	003ff006 	br	9c88 <__call_exitprocs+0x150>
    9cc8:	b9000117 	ldw	r4,4(r23)
    9ccc:	20000e1e 	bne	r4,zero,9d08 <__call_exitprocs+0x1d0>
    9cd0:	b9000017 	ldw	r4,0(r23)
    9cd4:	20000826 	beq	r4,zero,9cf8 <__call_exitprocs+0x1c0>
    9cd8:	b1000015 	stw	r4,0(r22)
    9cdc:	a0000226 	beq	r20,zero,9ce8 <__call_exitprocs+0x1b0>
    9ce0:	a009883a 	mov	r4,r20
    9ce4:	00000000 	call	0 <__alt_mem_epcs_flash>
    9ce8:	b809883a 	mov	r4,r23
    9cec:	00000000 	call	0 <__alt_mem_epcs_flash>
    9cf0:	b5c00017 	ldw	r23,0(r22)
    9cf4:	003fa706 	br	9b94 <__call_exitprocs+0x5c>
    9cf8:	0007883a 	mov	r3,zero
    9cfc:	b82d883a 	mov	r22,r23
    9d00:	182f883a 	mov	r23,r3
    9d04:	003fa306 	br	9b94 <__call_exitprocs+0x5c>
    9d08:	b8c00017 	ldw	r3,0(r23)
    9d0c:	003ffb06 	br	9cfc <__call_exitprocs+0x1c4>

00009d10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9d10:	defffc04 	addi	sp,sp,-16
    9d14:	df000315 	stw	fp,12(sp)
    9d18:	df000304 	addi	fp,sp,12
    9d1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9d20:	0001883a 	nop
    9d24:	e0bfff17 	ldw	r2,-4(fp)
    9d28:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    9d2c:	e0bffd17 	ldw	r2,-12(fp)
    9d30:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9d34:	e0bffe17 	ldw	r2,-8(fp)
    9d38:	10000226 	beq	r2,zero,9d44 <_exit+0x34>
    ALT_SIM_FAIL();
    9d3c:	002af070 	cmpltui	zero,zero,43969
    9d40:	00000106 	br	9d48 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    9d44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9d48:	003fff06 	br	9d48 <_exit+0x38>
